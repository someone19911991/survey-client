[{"C:\\Users\\Garik\\Desktop\\task2\\client\\src\\index.tsx":"1","C:\\Users\\Garik\\Desktop\\task2\\client\\src\\App.tsx":"2","C:\\Users\\Garik\\Desktop\\task2\\client\\src\\consts.ts":"3","C:\\Users\\Garik\\Desktop\\task2\\client\\src\\components\\Survey\\Survey.tsx":"4","C:\\Users\\Garik\\Desktop\\task2\\client\\src\\components\\UI\\Input\\Input.tsx":"5","C:\\Users\\Garik\\Desktop\\task2\\client\\src\\hooks\\index.ts":"6","C:\\Users\\Garik\\Desktop\\task2\\client\\src\\components\\UI\\Select\\Select.tsx":"7","C:\\Users\\Garik\\Desktop\\task2\\client\\src\\components\\Survey\\Survey.styled.ts":"8","C:\\Users\\Garik\\Desktop\\task2\\client\\src\\components\\UI\\Select\\Select.styled.ts":"9","C:\\Users\\Garik\\Desktop\\task2\\client\\src\\components\\UI\\Input\\Input.styled.ts":"10","C:\\Users\\Garik\\Desktop\\task2\\client\\src\\components\\UI\\Modal\\Modal.tsx":"11","C:\\Users\\Garik\\Desktop\\task2\\client\\src\\components\\UI\\Modal\\Modal.styled.ts":"12","C:\\Users\\Garik\\Desktop\\task2\\client\\src\\utils\\index.ts":"13","C:\\Users\\Garik\\Desktop\\task2\\client\\src\\types\\index.ts":"14","C:\\Users\\Garik\\Desktop\\task2\\client\\src\\components\\AnsweredQuestions\\AnsweredQuestions.tsx":"15","C:\\Users\\Garik\\Desktop\\task2\\client\\src\\components\\AnsweredQuestions\\AnsweredQuestions.styled.ts":"16"},{"size":230,"mtime":1667370506807,"results":"17","hashOfConfig":"18"},{"size":144,"mtime":1667409212212,"results":"19","hashOfConfig":"18"},{"size":3837,"mtime":1667380737952,"results":"20","hashOfConfig":"18"},{"size":11078,"mtime":1667410092583,"results":"21","hashOfConfig":"18"},{"size":584,"mtime":1667395480504,"results":"22","hashOfConfig":"18"},{"size":697,"mtime":1667395461525,"results":"23","hashOfConfig":"18"},{"size":630,"mtime":1667235899703,"results":"24","hashOfConfig":"18"},{"size":1427,"mtime":1667409114705,"results":"25","hashOfConfig":"18"},{"size":360,"mtime":1667407783521,"results":"26","hashOfConfig":"18"},{"size":636,"mtime":1667407837203,"results":"27","hashOfConfig":"18"},{"size":2004,"mtime":1667397379677,"results":"28","hashOfConfig":"18"},{"size":518,"mtime":1667410458896,"results":"29","hashOfConfig":"18"},{"size":1734,"mtime":1667384589038,"results":"30","hashOfConfig":"18"},{"size":554,"mtime":1667385012555,"results":"31","hashOfConfig":"18"},{"size":1226,"mtime":1667375593449,"results":"32","hashOfConfig":"18"},{"size":299,"mtime":1667375593365,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"zr9gie",{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"37"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"C:\\Users\\Garik\\Desktop\\task2\\client\\src\\index.tsx",[],[],[],"C:\\Users\\Garik\\Desktop\\task2\\client\\src\\App.tsx",[],[],"C:\\Users\\Garik\\Desktop\\task2\\client\\src\\consts.ts",["85","86"],[],"import { IQuestion, QuestionTypes } from \"./types/index\";\nimport * as yup from \"yup\";\n\nexport const question_2 = [\"Yes\", \"No\", \"Not sure\"];\nexport const question_3 = [\n    \"PC DVD-ROM\",\n    \"Macintosh DVD-ROM\",\n    \"Sony PlayStation 2/Microsoft X-Box\",\n    \"Console Top DVD player\",\n    \"None\",\n    \"Other\",\n];\nexport const question_4 = [\"Purchase\", \"Rent\"];\nexport const question_8 = [\"male\", \"female\"];\nexport const required_field = \"This field is required\";\nexport const no_match = \"No match for this value\";\nexport const validDateRegex =\n    /^\\d{4}\\-(0?[1-9]|1[012])\\-(0?[1-9]|[12][0-9]|3[01])$/;\n\nexport const questions: IQuestion[] = [\n    {\n        question:\n            \"When would you purchase a DVD player if you don't already own one?\",\n        fieldName: \"question_1\",\n        currentValue: \"\",\n        type: QuestionTypes.textInput,\n        rules: yup.string().trim().required(required_field),\n    },\n    {\n        question:\n            \"Would you be interested in software that allows you to have control over profanity, nudity, and violence in movies?\",\n        fieldName: \"question_2\",\n        currentValue: question_2,\n        type: QuestionTypes.radio,\n        rules: yup\n            .string()\n            .oneOf(question_2, no_match)\n            .typeError(required_field),\n    },\n    {\n        question: \"What type of DVD player do you own?\",\n        fieldName: \"question_3\",\n        currentValue: question_3,\n        type: QuestionTypes.select,\n        rules: yup\n            .string()\n            .oneOf(question_3, no_match)\n            .typeError(required_field),\n    },\n    {\n        question: \"Do you mainly purchase or rent movies you view?\",\n        fieldName: \"question_4\",\n        currentValue: question_4,\n        type: QuestionTypes.radio,\n        rules: yup\n            .string()\n            .oneOf(question_4, required_field)\n            .typeError(required_field),\n    },\n    {\n        question:\n            \"How much do you spend renting and/or buying movies per month(in USD)?\",\n        fieldName: \"question_5\",\n        currentValue: 0,\n        type: QuestionTypes.numberInput,\n        rules: yup\n            .number()\n            .required(required_field)\n            .typeError(\"Numeric values only accepted\"),\n    },\n    {\n        question: \"Type your first name, last name and email address\",\n        fieldName: \"\",\n        type: QuestionTypes.multiple,\n        multiple: [\n            {\n                fieldName: \"first_name\",\n                inputLabel: \"First name\",\n                currentValue: \"\",\n                type: QuestionTypes.textInput,\n                rules: yup.string().trim().required(\"First name is required\"),\n            },\n            {\n                fieldName: \"last_name\",\n                inputLabel: \"Last name\",\n                currentValue: \"\",\n                type: QuestionTypes.textInput,\n                rules: yup.string().trim().required(\"Last name is required\"),\n            },\n            {\n                fieldName: \"email\",\n                inputLabel: \"Email\",\n                currentValue: \"\",\n                type: QuestionTypes.email,\n                rules: yup\n                    .string()\n                    .trim()\n                    .email()\n                    .required(\"Email is required\"),\n            },\n        ],\n    },\n    {\n        question: \"When is your birthday?\",\n        fieldName: \"question_7\",\n        currentValue: \"1997-12-12\",\n        type: QuestionTypes.date,\n        rules: yup.string().matches(validDateRegex, \"Invalid date\"),\n    },\n    {\n        question: \"What is your gender?\",\n        fieldName: \"question_8\",\n        currentValue: question_8,\n        type: QuestionTypes.radio,\n        rules: yup\n            .string()\n            .oneOf(question_8, required_field)\n            .typeError(required_field),\n    },\n];\n","C:\\Users\\Garik\\Desktop\\task2\\client\\src\\components\\Survey\\Survey.tsx",["87"],[],"import React, { Fragment, useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { QuestionTypes, ISurvey, ErrorType } from \"../../types/index\";\nimport Input from \"../UI/Input/Input\";\nimport { useQuestion } from \"../../hooks\";\nimport Select from \"../UI/Select/Select\";\nimport {\n    QuestionTitle,\n    SButton,\n    Wrapper,\n    ErrorMsg,\n    Error,\n    ErrCloseBtn,\n    ErrorWrapper,\n    Form\n} from \"./Survey.styled\";\nimport Modal from \"../UI/Modal/Modal\";\nimport { addUpdateQuestion, getLSQuestions, getModalTitle } from \"../../utils\";\nimport AnsweredQuestions from \"../AnsweredQuestions/AnsweredQuestions\";\nimport axios from \"axios\";\n\nconst Survey = () => {\n    const [questionIndex, setQuestionIndex] = useState(0);\n    const [answeredQuestions, setAnsweredQuestions] = useState<ISurvey>({});\n    const [confirmSurvey, setConfirmSurvey] = useState<string>(\"pending\");\n    const [modalOpen, setModalOpen] = useState<boolean>(false);\n    const [modalTitle, setModalTitle] = useState<string>(\"\");\n    const [error, setError] = useState<string>(\"\");\n    const [finishSurvey, setFinishSurvey] = useState<boolean>(false);\n    const [loading, setLoading] = useState<boolean>(false);\n\n    const { question, fieldName, validationSchema, questions } =\n        useQuestion(questionIndex);\n\n    type FormTypes = {\n        [fieldName: string]: typeof question.currentValue | string;\n    };\n\n    const {\n        register,\n        formState: { errors },\n        handleSubmit,\n        setValue,\n    } = useForm<FormTypes>({ resolver: yupResolver(validationSchema) });\n\n    const onSubmit = async (data: FormTypes) => {\n        let answerToPass = data[questions[questionIndex].fieldName] as\n            | string\n            | string[];\n        let questionLabel = questions[questionIndex].fieldName as\n            | string\n            | string[];\n        if (!answerToPass && !questionLabel) {\n            questionLabel = questions[questionIndex]?.multiple?.map(\n                (item) => item.fieldName\n            ) as string[];\n            answerToPass = questionLabel.map((item) => data[item]) as string[];\n        }\n        let survey = localStorage.getItem(\"survey\");\n        if (survey) {\n            const parsedSurvey = JSON.parse(survey) as ISurvey;\n            const updatedSurvey = addUpdateQuestion(\n                answerToPass,\n                questionLabel,\n                parsedSurvey\n            );\n            localStorage.setItem(\"survey\", JSON.stringify(updatedSurvey));\n        }\n        const updatedSurvey = addUpdateQuestion(answerToPass, questionLabel, {\n            ...answeredQuestions,\n        });\n        setAnsweredQuestions(updatedSurvey);\n        if (questionIndex < questions.length - 1) {\n            setQuestionIndex((prev) => ++prev);\n        } else {\n            setModalOpen(true);\n            setConfirmSurvey(\"pending\");\n            setFinishSurvey(true);\n            setModalTitle(\"Are you sure you want to commit your answers?\");\n        }\n    };\n\n    const onPrev = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        e.preventDefault();\n        setQuestionIndex((prev) => --prev);\n    };\n\n    useEffect(() => {\n        const survey = localStorage.getItem(\"survey\");\n        if (confirmSurvey === \"confirmed\") {\n            if (survey) {\n                const {\n                    lsAnsweredQuestions,\n                    qIndex,\n                    answeredQuestionsEntries,\n                } = getLSQuestions(survey);\n                setAnsweredQuestions(lsAnsweredQuestions);\n                answeredQuestionsEntries.forEach((item) => {\n                    setValue(item[0], item[1]);\n                });\n                if(qIndex === 8){\n                    setFinishSurvey(true);\n                    setModalTitle(\"Are you sure you want to commit your answers?\");\n                    setModalOpen(true);\n                }else{\n                    setQuestionIndex(qIndex);\n                }\n            } else {\n                !finishSurvey && localStorage.setItem(\"survey\", JSON.stringify({}));\n            }\n        } else if (confirmSurvey === \"rejected\") {\n            localStorage.removeItem(\"survey\");\n        }\n    }, [confirmSurvey, setValue]);\n\n    useEffect(() => {\n        const { _modalTitle, openModal } = getModalTitle();\n        setModalOpen(openModal);\n        setModalTitle(_modalTitle);\n    }, []);\n\n    const onFinishSurvey = async () => {\n        try {\n            setLoading(true);\n            await axios.post(\n                \"https://survey-test-task.herokuapp.com/api/survey\",\n                answeredQuestions\n            );\n            setModalOpen(false);\n            setConfirmSurvey(\"confirmed\");\n            setAnsweredQuestions({});\n            localStorage.removeItem(\"survey\");\n            setLoading(false);\n        } catch (err) {\n            setModalOpen(false);\n            const error = err as ErrorType;\n            setError(error.message);\n        }\n    };\n\n    const onHandleError = () => {\n        localStorage.removeItem('survey');\n        window.location.reload()\n    }\n\n    return (\n        <>\n            {error && (\n                <ErrorWrapper>\n                    <Error>{error}</Error>\n                    <ErrCloseBtn onClick={onHandleError}>\n                        x\n                    </ErrCloseBtn>\n                </ErrorWrapper>\n            )}\n            {confirmSurvey === \"confirmed\" && finishSurvey && (\n                <Wrapper>\n                    <h1 style={{color: \"var(--white)\"}}>You have successfully completed your survey!</h1>\n                </Wrapper>\n            )}\n            {confirmSurvey === \"pending\" &&\n                modalOpen &&\n                !finishSurvey &&\n                 (\n                    <Modal\n                        modalTitle={modalTitle}\n                        onCancel={() => {\n                            setModalOpen(false);\n                            setConfirmSurvey(\"rejected\");\n                        }}\n                        onConfirm={() => {\n                            setModalOpen(false);\n                            setConfirmSurvey(\"confirmed\");\n                        }}\n                    />\n                )}\n            {modalOpen && finishSurvey  && (\n                <Modal\n                    loading={loading}\n                    modalTitle={modalTitle}\n                    onCancel={() => {\n                        setModalOpen(false);\n                        setFinishSurvey(false);\n                    }}\n                    onConfirm={onFinishSurvey}\n                >\n                    <AnsweredQuestions answeredQuestions={answeredQuestions} />\n                </Modal>\n            )}\n            {!modalOpen && !finishSurvey && (\n                <Wrapper>\n                    <h1 style={{ marginBottom: \"50px\" }}>\n                        Question {questionIndex + 1}/{questions.length}\n                    </h1>\n                    <QuestionTitle>{question.question}</QuestionTitle>\n                    <Form style={{padding: '10px'}} onSubmit={handleSubmit(onSubmit)}>\n                        {question.type === QuestionTypes.textInput && (\n                            <Input type=\"text\" {...register(fieldName)} />\n                        )}\n                        {question.type === QuestionTypes.numberInput && (\n                            <Input type=\"number\" {...register(fieldName)} />\n                        )}\n                        {question.type === QuestionTypes.date && (\n                            <Input type=\"date\" {...register(fieldName)} />\n                        )}\n                        {question.type === QuestionTypes.select && (\n                            <Select\n                                items={\n                                    Array.isArray(question.currentValue)\n                                        ? question.currentValue\n                                        : []\n                                }\n                                {...register(fieldName)}\n                            />\n                        )}\n                        {question.type === QuestionTypes.radio &&\n                            Array.isArray(question.currentValue) &&\n                            question.currentValue.map((opt) => (\n                                <Input\n                                    type=\"radio\"\n                                    label={opt}\n                                    key={opt}\n                                    value={opt}\n                                    {...register(fieldName)}\n                                />\n                            ))}\n                        {question.type === QuestionTypes.multiple &&\n                            question?.multiple?.map((q) => (\n                                <Fragment key={q.inputLabel}>\n                                    {q.type === QuestionTypes.email && (\n                                        <Input\n                                            label={q.inputLabel}\n                                            type=\"email\"\n                                            {...register(q.fieldName)}\n                                        />\n                                    )}\n                                    {q.type === QuestionTypes.textInput && (\n                                        <Input\n                                            label={q.inputLabel}\n                                            {...register(q.fieldName)}\n                                        />\n                                    )}\n                                    <p style={{ color: \"red\" }}>\n                                        {errors[q.fieldName]?.message}\n                                    </p>\n                                </Fragment>\n                            ))}\n                        <ErrorMsg>{errors[fieldName]?.message}</ErrorMsg>\n                        <div\n                            style={{\n                                display: \"flex\",\n                                justifyContent: \"space-between\",\n                            }}\n                        >\n                            {questionIndex !== 0 && (\n                                <SButton\n                                    style={{backgroundColor: \"#ffc827\"}}\n                                    onClick={onPrev}\n                                >\n                                    Prev\n                                </SButton>\n                            )}\n                            {questionIndex <= questions.length - 1 && (\n                                <SButton>\n                                    {questionIndex < questions.length - 1\n                                        ? \"Next\"\n                                        : \"Submit\"}\n                                </SButton>\n                            )}\n                        </div>\n                    </Form>\n                </Wrapper>\n            )}\n        </>\n    );\n};\n\nexport default Survey;\n","C:\\Users\\Garik\\Desktop\\task2\\client\\src\\components\\UI\\Input\\Input.tsx",[],[],"C:\\Users\\Garik\\Desktop\\task2\\client\\src\\hooks\\index.ts",[],[],"C:\\Users\\Garik\\Desktop\\task2\\client\\src\\components\\UI\\Select\\Select.tsx",[],[],"C:\\Users\\Garik\\Desktop\\task2\\client\\src\\components\\Survey\\Survey.styled.ts",[],[],"C:\\Users\\Garik\\Desktop\\task2\\client\\src\\components\\UI\\Select\\Select.styled.ts",[],[],"C:\\Users\\Garik\\Desktop\\task2\\client\\src\\components\\UI\\Input\\Input.styled.ts",[],[],"C:\\Users\\Garik\\Desktop\\task2\\client\\src\\components\\UI\\Modal\\Modal.tsx",[],[],"C:\\Users\\Garik\\Desktop\\task2\\client\\src\\components\\UI\\Modal\\Modal.styled.ts",[],[],"C:\\Users\\Garik\\Desktop\\task2\\client\\src\\utils\\index.ts",[],[],"C:\\Users\\Garik\\Desktop\\task2\\client\\src\\types\\index.ts",[],[],"C:\\Users\\Garik\\Desktop\\task2\\client\\src\\components\\AnsweredQuestions\\AnsweredQuestions.tsx",[],[],"C:\\Users\\Garik\\Desktop\\task2\\client\\src\\components\\AnsweredQuestions\\AnsweredQuestions.styled.ts",[],[],{"ruleId":"88","severity":1,"message":"89","line":18,"column":12,"nodeType":"90","messageId":"91","endLine":18,"endColumn":13,"suggestions":"92"},{"ruleId":"88","severity":1,"message":"89","line":18,"column":30,"nodeType":"90","messageId":"91","endLine":18,"endColumn":31,"suggestions":"93"},{"ruleId":"94","severity":1,"message":"95","line":115,"column":8,"nodeType":"96","endLine":115,"endColumn":33,"suggestions":"97"},"no-useless-escape","Unnecessary escape character: \\-.","Literal","unnecessaryEscape",["98","99"],["100","101"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'finishSurvey'. Either include it or remove the dependency array.","ArrayExpression",["102"],{"messageId":"103","fix":"104","desc":"105"},{"messageId":"106","fix":"107","desc":"108"},{"messageId":"103","fix":"109","desc":"105"},{"messageId":"106","fix":"110","desc":"108"},{"desc":"111","fix":"112"},"removeEscape",{"range":"113","text":"114"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"115","text":"116"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"117","text":"114"},{"range":"118","text":"116"},"Update the dependencies array to be: [confirmSurvey, finishSurvey, setValue]",{"range":"119","text":"120"},[553,554],"",[553,553],"\\",[571,572],[571,571],[4263,4288],"[confirmSurvey, finishSurvey, setValue]"]