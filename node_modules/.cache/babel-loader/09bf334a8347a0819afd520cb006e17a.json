{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Garik\\\\Desktop\\\\task2\\\\client\\\\src\\\\components\\\\Survey\\\\Survey.tsx\",\n  _s = $RefreshSig$();\nimport React, { Fragment, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { QuestionTypes } from \"../../store/types\";\nimport Input from \"../UI/Input/Input\";\nimport { useQuestion } from \"../../hooks\";\nimport Select from \"../UI/Select/Select\";\nimport { QuestionTitle, SButton, Wrapper, ErrorMsg } from \"./Survey.styled\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Survey = () => {\n  _s();\n  var _question$multiple, _errors$fieldName;\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const {\n    question,\n    fieldName,\n    validationSchema\n  } = useQuestion(questionIndex);\n  const {\n    register,\n    formState: {\n      errors\n    },\n    handleSubmit\n  } = useForm({\n    resolver: yupResolver(validationSchema)\n  });\n  const onSubmit = data => {\n    console.log(data);\n    setQuestionIndex(prev => ++prev);\n  };\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: [/*#__PURE__*/_jsxDEV(QuestionTitle, {\n      children: question.question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      children: [question.type === QuestionTypes.textInput && /*#__PURE__*/_jsxDEV(Input, {\n        type: \"text\",\n        ...register(fieldName)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 25\n      }, this), question.type === QuestionTypes.numberInput && /*#__PURE__*/_jsxDEV(Input, {\n        type: \"number\",\n        ...register(fieldName)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 25\n      }, this), question.type === QuestionTypes.date && /*#__PURE__*/_jsxDEV(Input, {\n        type: \"date\",\n        ...register(fieldName)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 25\n      }, this), question.type === QuestionTypes.select && /*#__PURE__*/_jsxDEV(Select, {\n        items: Array.isArray(question.currentValue) ? question.currentValue : [],\n        ...register(fieldName)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 25\n      }, this), question.type === QuestionTypes.radio && Array.isArray(question.currentValue) && question.currentValue.map(opt => /*#__PURE__*/_jsxDEV(Input, {\n        type: \"radio\",\n        label: opt,\n        value: opt,\n        ...register(fieldName)\n      }, opt, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 29\n      }, this)), question.type === QuestionTypes.multiple && (question === null || question === void 0 ? void 0 : (_question$multiple = question.multiple) === null || _question$multiple === void 0 ? void 0 : _question$multiple.map(q => {\n        var _errors$q$fieldName;\n        return /*#__PURE__*/_jsxDEV(Fragment, {\n          children: [q.type === QuestionTypes.email && /*#__PURE__*/_jsxDEV(Input, {\n            label: q.inputLabel,\n            type: \"email\",\n            ...register(q.fieldName)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 37\n          }, this), q.type === QuestionTypes.textInput && /*#__PURE__*/_jsxDEV(Input, {\n            label: q.inputLabel,\n            ...register(q.fieldName)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: \"red\"\n            },\n            children: (_errors$q$fieldName = errors[q.fieldName]) === null || _errors$q$fieldName === void 0 ? void 0 : _errors$q$fieldName.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 33\n          }, this)]\n        }, q.inputLabel, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 29\n        }, this);\n      })), /*#__PURE__*/_jsxDEV(ErrorMsg, {\n        children: (_errors$fieldName = errors[fieldName]) === null || _errors$fieldName === void 0 ? void 0 : _errors$fieldName.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(SButton, {\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n_s(Survey, \"I8pVAlk4IrWs+A1GfeqlWNQNXeg=\", false, function () {\n  return [useQuestion, useForm];\n});\n_c = Survey;\nexport default Survey;\nvar _c;\n$RefreshReg$(_c, \"Survey\");","map":{"version":3,"names":["React","Fragment","useState","useForm","yupResolver","QuestionTypes","Input","useQuestion","Select","QuestionTitle","SButton","Wrapper","ErrorMsg","Survey","questionIndex","setQuestionIndex","question","fieldName","validationSchema","register","formState","errors","handleSubmit","resolver","onSubmit","data","console","log","prev","type","textInput","numberInput","date","select","Array","isArray","currentValue","radio","map","opt","multiple","q","email","inputLabel","color","message"],"sources":["C:/Users/Garik/Desktop/task2/client/src/components/Survey/Survey.tsx"],"sourcesContent":["import React, { Fragment, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { QuestionTypes } from \"../../store/types\";\nimport Input from \"../UI/Input/Input\";\nimport { useQuestion } from \"../../hooks\";\nimport Select from \"../UI/Select/Select\";\nimport {QuestionTitle, SButton, Wrapper, ErrorMsg} from \"./Survey.styled\";\n\n\nconst Survey = () => {\n    const [questionIndex, setQuestionIndex] = useState(0);\n    const { question, fieldName, validationSchema } =\n        useQuestion(questionIndex);\n\n    type FormTypes = {\n        [fieldName: string]: typeof question.currentValue | string;\n    };\n\n    const {\n        register,\n        formState: { errors },\n        handleSubmit,\n    } = useForm<FormTypes>({ resolver: yupResolver(validationSchema) });\n\n    const onSubmit = (data: FormTypes) => {\n        console.log(data);\n        setQuestionIndex((prev) => ++prev);\n    };\n\n    return (\n        <Wrapper>\n            <QuestionTitle>{question.question}</QuestionTitle>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                    {question.type === QuestionTypes.textInput && (\n                        <Input type=\"text\" {...register(fieldName)} />\n                    )}\n                    {question.type === QuestionTypes.numberInput && (\n                        <Input type=\"number\" {...register(fieldName)} />\n                    )}\n                    {question.type === QuestionTypes.date && (\n                        <Input type=\"date\" {...register(fieldName)} />\n                    )}\n                    {question.type === QuestionTypes.select && (\n                        <Select items={Array.isArray(question.currentValue) ? question.currentValue : []} {...register(fieldName)} />\n                    )}\n                    {question.type === QuestionTypes.radio &&\n                        Array.isArray(question.currentValue) &&\n                        question.currentValue.map((opt) => (\n                            <Input\n                                type=\"radio\"\n                                label={opt}\n                                value={opt}\n                                key={opt}\n                                {...register(fieldName)}\n                            />\n                        ))}\n                    {question.type === QuestionTypes.multiple &&\n                        question?.multiple?.map((q) => (\n                            <Fragment key={q.inputLabel}>\n                                {q.type === QuestionTypes.email && (\n                                    <Input\n                                        label={q.inputLabel}\n                                        type=\"email\"\n                                        {...register(q.fieldName)}\n                                    />\n                                )}\n                                {q.type === QuestionTypes.textInput && (\n                                    <Input\n                                        label={q.inputLabel}\n                                        {...register(q.fieldName)}\n                                    />\n                                )}\n                                <p style={{ color: \"red\" }}>\n                                    {errors[q.fieldName]?.message}\n                                </p>\n                            </Fragment>\n                        ))}\n                    <ErrorMsg>{errors[fieldName]?.message}</ErrorMsg>\n                <div>\n                    <SButton>Submit</SButton>\n                </div>\n            </form>\n        </Wrapper>\n    );\n};\n\nexport default Survey;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}