{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Garik\\\\Desktop\\\\task2\\\\client\\\\src\\\\components\\\\Survey\\\\Survey.tsx\",\n  _s = $RefreshSig$();\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { QuestionTypes } from \"../../store/types\";\nimport Input from \"../UI/Input/Input\";\nimport { useQuestion } from \"../../hooks\";\nimport Select from \"../UI/Select/Select\";\nimport { QuestionTitle, SButton, Wrapper, ErrorMsg } from \"./Survey.styled\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Survey = () => {\n  _s();\n  var _question$multiple, _errors$fieldName;\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [answeredQuestions, setAnsweredQuestions] = useState([]);\n  const {\n    question,\n    fieldName,\n    validationSchema,\n    questions\n  } = useQuestion(questionIndex);\n  const {\n    register,\n    formState: {\n      errors\n    },\n    handleSubmit\n  } = useForm({\n    resolver: yupResolver(validationSchema)\n  });\n  const onSubmit = data => {\n    console.log(data);\n    let survey = localStorage.getItem(\"survey\");\n    if (survey) {\n      const parsedSurvey = JSON.parse(survey);\n      const answerToPass = data[Object.keys(data)[questionIndex]];\n      parsedSurvey.push({\n        question: question.question,\n        answer: answerToPass\n      });\n      localStorage.setItem(\"survey\", JSON.stringify(parsedSurvey));\n    }\n    setQuestionIndex(prev => ++prev);\n  };\n  useEffect(() => {\n    const survey = localStorage.getItem(\"survey\");\n    if (survey) {\n      const confirm = window.confirm('Would you like to continue the previous survey?');\n      if (confirm) {\n        const lsAnsweredQuestions = JSON.parse(survey);\n        setAnsweredQuestions(lsAnsweredQuestions);\n      } else {\n        localStorage.removeItem('survey');\n      }\n    } else {\n      const answer = window.confirm(\"Would you like to continue your survey after quitting the page?\");\n      if (answer) {\n        localStorage.setItem(\"survey\", JSON.stringify([]));\n      } else {\n        localStorage.removeItem(\"survey\");\n      }\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        marginBottom: \"50px\"\n      },\n      children: [\"Question \", questionIndex + 1, \"/\", questions.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(QuestionTitle, {\n      children: question.question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      children: [question.type === QuestionTypes.textInput && /*#__PURE__*/_jsxDEV(Input, {\n        type: \"text\",\n        ...register(fieldName)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this), question.type === QuestionTypes.numberInput && /*#__PURE__*/_jsxDEV(Input, {\n        type: \"number\",\n        ...register(fieldName)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this), question.type === QuestionTypes.date && /*#__PURE__*/_jsxDEV(Input, {\n        type: \"date\",\n        ...register(fieldName)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this), question.type === QuestionTypes.select && /*#__PURE__*/_jsxDEV(Select, {\n        items: Array.isArray(question.currentValue) ? question.currentValue : [],\n        ...register(fieldName)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this), question.type === QuestionTypes.radio && Array.isArray(question.currentValue) && question.currentValue.map(opt => /*#__PURE__*/_jsxDEV(Input, {\n        type: \"radio\",\n        label: opt,\n        value: opt,\n        ...register(fieldName)\n      }, opt, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 25\n      }, this)), question.type === QuestionTypes.multiple && (question === null || question === void 0 ? void 0 : (_question$multiple = question.multiple) === null || _question$multiple === void 0 ? void 0 : _question$multiple.map(q => {\n        var _errors$q$fieldName;\n        return /*#__PURE__*/_jsxDEV(Fragment, {\n          children: [q.type === QuestionTypes.email && /*#__PURE__*/_jsxDEV(Input, {\n            label: q.inputLabel,\n            type: \"email\",\n            ...register(q.fieldName)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 33\n          }, this), q.type === QuestionTypes.textInput && /*#__PURE__*/_jsxDEV(Input, {\n            label: q.inputLabel,\n            ...register(q.fieldName)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: \"red\"\n            },\n            children: (_errors$q$fieldName = errors[q.fieldName]) === null || _errors$q$fieldName === void 0 ? void 0 : _errors$q$fieldName.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 29\n          }, this)]\n        }, q.inputLabel, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 25\n        }, this);\n      })), /*#__PURE__*/_jsxDEV(ErrorMsg, {\n        children: (_errors$fieldName = errors[fieldName]) === null || _errors$fieldName === void 0 ? void 0 : _errors$fieldName.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(SButton, {\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n};\n_s(Survey, \"tHVYkGrSy0ikWkhPi1R7TXjBUO8=\", false, function () {\n  return [useQuestion, useForm];\n});\n_c = Survey;\nexport default Survey;\nvar _c;\n$RefreshReg$(_c, \"Survey\");","map":{"version":3,"names":["React","Fragment","useEffect","useState","useForm","yupResolver","QuestionTypes","Input","useQuestion","Select","QuestionTitle","SButton","Wrapper","ErrorMsg","Survey","questionIndex","setQuestionIndex","answeredQuestions","setAnsweredQuestions","question","fieldName","validationSchema","questions","register","formState","errors","handleSubmit","resolver","onSubmit","data","console","log","survey","localStorage","getItem","parsedSurvey","JSON","parse","answerToPass","Object","keys","push","answer","setItem","stringify","prev","confirm","window","lsAnsweredQuestions","removeItem","marginBottom","length","type","textInput","numberInput","date","select","Array","isArray","currentValue","radio","map","opt","multiple","q","email","inputLabel","color","message"],"sources":["C:/Users/Garik/Desktop/task2/client/src/components/Survey/Survey.tsx"],"sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { QuestionTypes } from \"../../store/types\";\nimport Input from \"../UI/Input/Input\";\nimport { useQuestion } from \"../../hooks\";\nimport Select from \"../UI/Select/Select\";\nimport { QuestionTitle, SButton, Wrapper, ErrorMsg } from \"./Survey.styled\";\n\ntype LSSurvey = { question: string; answer: string }[];\n\nconst Survey = () => {\n    const [questionIndex, setQuestionIndex] = useState(0);\n    const [answeredQuestions, setAnsweredQuestions] = useState<LSSurvey>([]);\n    const { question, fieldName, validationSchema, questions } =\n        useQuestion(questionIndex);\n\n    type FormTypes = {\n        [fieldName: string]: typeof question.currentValue | string;\n    };\n\n    const {\n        register,\n        formState: { errors },\n        handleSubmit,\n    } = useForm<FormTypes>({ resolver: yupResolver(validationSchema) });\n\n    const onSubmit = (data: FormTypes) => {\n        console.log(data);\n        let survey = localStorage.getItem(\"survey\");\n        if (survey) {\n            const parsedSurvey = JSON.parse(survey) as LSSurvey;\n            const answerToPass = data[\n                Object.keys(data)[questionIndex]\n            ] as string;\n            parsedSurvey.push({\n                question: question.question,\n                answer: answerToPass,\n            });\n            localStorage.setItem(\"survey\", JSON.stringify(parsedSurvey));\n        }\n        setQuestionIndex((prev) => ++prev);\n    };\n\n    useEffect(() => {\n        const survey = localStorage.getItem(\"survey\");\n        if (survey) {\n            const confirm = window.confirm('Would you like to continue the previous survey?');\n            if(confirm){\n                const lsAnsweredQuestions = JSON.parse(survey) as LSSurvey;\n                setAnsweredQuestions(lsAnsweredQuestions);\n            }else{\n                localStorage.removeItem('survey');\n            }\n        } else {\n            const answer = window.confirm(\n                \"Would you like to continue your survey after quitting the page?\"\n            );\n            if (answer) {\n                localStorage.setItem(\"survey\", JSON.stringify([]));\n            } else {\n                localStorage.removeItem(\"survey\");\n            }\n        }\n    }, []);\n\n    return (\n        <Wrapper>\n            <h1 style={{ marginBottom: \"50px\" }}>\n                Question {questionIndex + 1}/{questions.length}\n            </h1>\n            <QuestionTitle>{question.question}</QuestionTitle>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                {question.type === QuestionTypes.textInput && (\n                    <Input type=\"text\" {...register(fieldName)} />\n                )}\n                {question.type === QuestionTypes.numberInput && (\n                    <Input type=\"number\" {...register(fieldName)} />\n                )}\n                {question.type === QuestionTypes.date && (\n                    <Input type=\"date\" {...register(fieldName)} />\n                )}\n                {question.type === QuestionTypes.select && (\n                    <Select\n                        items={\n                            Array.isArray(question.currentValue)\n                                ? question.currentValue\n                                : []\n                        }\n                        {...register(fieldName)}\n                    />\n                )}\n                {question.type === QuestionTypes.radio &&\n                    Array.isArray(question.currentValue) &&\n                    question.currentValue.map((opt) => (\n                        <Input\n                            type=\"radio\"\n                            label={opt}\n                            value={opt}\n                            key={opt}\n                            {...register(fieldName)}\n                        />\n                    ))}\n                {question.type === QuestionTypes.multiple &&\n                    question?.multiple?.map((q) => (\n                        <Fragment key={q.inputLabel}>\n                            {q.type === QuestionTypes.email && (\n                                <Input\n                                    label={q.inputLabel}\n                                    type=\"email\"\n                                    {...register(q.fieldName)}\n                                />\n                            )}\n                            {q.type === QuestionTypes.textInput && (\n                                <Input\n                                    label={q.inputLabel}\n                                    {...register(q.fieldName)}\n                                />\n                            )}\n                            <p style={{ color: \"red\" }}>\n                                {errors[q.fieldName]?.message}\n                            </p>\n                        </Fragment>\n                    ))}\n                <ErrorMsg>{errors[fieldName]?.message}</ErrorMsg>\n                <div>\n                    <SButton>Submit</SButton>\n                </div>\n            </form>\n        </Wrapper>\n    );\n};\n\nexport default Survey;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}