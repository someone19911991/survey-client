{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { QuestionTypes } from \"../types\";\nimport * as yup from \"yup\";\nimport { no_match, question_2, question_3, question_4, question_8, required_field, validDateRegex } from \"../../consts\";\nconst initialState = [{\n  question: \"When would you purchase a DVD player if you don't already own one?\",\n  fieldName: \"question_1\",\n  currentValue: \"\",\n  type: QuestionTypes.textInput,\n  rules: yup.string().trim().required(required_field)\n}, {\n  question: \"Would you be interested in software that allows you to have control over profanity, nudity, and violence in movies?\",\n  fieldName: \"question_2\",\n  currentValue: question_2,\n  type: QuestionTypes.radio,\n  rules: yup.string().oneOf(question_2, no_match).typeError(required_field)\n}, {\n  question: \"What type of DVD player do you own?\",\n  fieldName: \"question_3\",\n  currentValue: question_3,\n  type: QuestionTypes.select,\n  rules: yup.string().oneOf(question_3, no_match).typeError(required_field)\n}, {\n  question: \"Do you mainly purchase or rent movies you view?\",\n  fieldName: \"question_4\",\n  currentValue: question_4,\n  type: QuestionTypes.radio,\n  rules: yup.string().oneOf(question_4, required_field).typeError(required_field)\n}, {\n  question: \"How much do you spend renting and/or buying movies per month(in USD)?\",\n  fieldName: \"question_5\",\n  currentValue: 0,\n  type: QuestionTypes.numberInput,\n  rules: yup.number().required(required_field).typeError('Numeric values only accepted')\n}, {\n  question: \"Type your first name, last name and email address\",\n  fieldName: \"\",\n  type: QuestionTypes.multiple,\n  multiple: [{\n    fieldName: \"first_name\",\n    inputLabel: \"First name\",\n    currentValue: '',\n    type: QuestionTypes.textInput,\n    rules: yup.string().trim().required('First name is required')\n  }, {\n    fieldName: \"last_name\",\n    inputLabel: \"Last name\",\n    currentValue: '',\n    type: QuestionTypes.textInput,\n    rules: yup.string().trim().required('Last name is required')\n  }, {\n    fieldName: \"email\",\n    inputLabel: \"Email\",\n    currentValue: '',\n    type: QuestionTypes.email,\n    rules: yup.string().trim().email().required('Email is required')\n  }]\n}, {\n  question: \"When is your birthday?\",\n  fieldName: \"question_7\",\n  currentValue: '1997-12-12',\n  type: QuestionTypes.date,\n  rules: yup.string().matches(validDateRegex, \"Invalid date\")\n}, {\n  question: \"What is your gender?\",\n  fieldName: \"question_8\",\n  currentValue: question_8,\n  type: QuestionTypes.radio,\n  rules: yup.string().oneOf(question_8, required_field).typeError(required_field)\n}];\nconst QuestionSlice = createSlice({\n  name: \"question\",\n  initialState,\n  reducers: {}\n});\nconst questionReducer = QuestionSlice.reducer;\nexport { questionReducer };","map":{"version":3,"names":["createSlice","QuestionTypes","yup","no_match","question_2","question_3","question_4","question_8","required_field","validDateRegex","initialState","question","fieldName","currentValue","type","textInput","rules","string","trim","required","radio","oneOf","typeError","select","numberInput","number","multiple","inputLabel","email","date","matches","QuestionSlice","name","reducers","questionReducer","reducer"],"sources":["C:/Users/Garik/Desktop/task2/client/src/store/reducers/QuestionSlice.ts"],"sourcesContent":["import {createSlice} from \"@reduxjs/toolkit\";\nimport {IQuestion, QuestionTypes} from \"../types\";\nimport * as yup from \"yup\";\nimport {no_match, question_2, question_3, question_4, question_8, required_field, validDateRegex} from \"../../consts\";\n\nconst initialState: IQuestion[] = [\n        {\n            question:\n                \"When would you purchase a DVD player if you don't already own one?\",\n            fieldName: \"question_1\",\n            currentValue: \"\",\n            type: QuestionTypes.textInput,\n            rules: yup.string().trim().required(required_field)\n        },\n        {\n            question:\n                \"Would you be interested in software that allows you to have control over profanity, nudity, and violence in movies?\",\n            fieldName: \"question_2\",\n            currentValue: question_2,\n            type: QuestionTypes.radio,\n            rules: yup.string().oneOf(question_2, no_match).typeError(required_field)\n        },\n        {\n            question: \"What type of DVD player do you own?\",\n            fieldName: \"question_3\",\n            currentValue: question_3,\n            type: QuestionTypes.select,\n            rules: yup.string().oneOf(question_3, no_match).typeError(required_field)\n        },\n        {\n            question: \"Do you mainly purchase or rent movies you view?\",\n            fieldName: \"question_4\",\n            currentValue: question_4,\n            type: QuestionTypes.radio,\n            rules: yup.string().oneOf(question_4, required_field).typeError(required_field)\n        },\n        {\n            question:\n                \"How much do you spend renting and/or buying movies per month(in USD)?\",\n            fieldName: \"question_5\",\n            currentValue: 0,\n            type: QuestionTypes.numberInput,\n            rules: yup.number().required(required_field).typeError('Numeric values only accepted')\n        },\n        {\n            question: \"Type your first name, last name and email address\",\n            fieldName: \"\",\n            type: QuestionTypes.multiple,\n            multiple: [\n                {\n                    fieldName: \"first_name\",\n                    inputLabel: \"First name\",\n                    currentValue: '',\n                    type: QuestionTypes.textInput,\n                    rules: yup.string().trim().required('First name is required')\n                },\n                {\n                    fieldName: \"last_name\",\n                    inputLabel: \"Last name\",\n                    currentValue: '',\n                    type: QuestionTypes.textInput,\n                    rules: yup.string().trim().required('Last name is required')\n                },\n                {\n                    fieldName: \"email\",\n                    inputLabel: \"Email\",\n                    currentValue: '',\n                    type: QuestionTypes.email,\n                    rules: yup.string().trim().email().required('Email is required')\n                },\n            ]\n        },\n        {\n            question: \"When is your birthday?\",\n            fieldName: \"question_7\",\n            currentValue: '1997-12-12',\n            type: QuestionTypes.date,\n            rules: yup.string().matches(validDateRegex, \"Invalid date\"),\n        },\n        {\n            question: \"What is your gender?\",\n            fieldName: \"question_8\",\n            currentValue: question_8,\n            type: QuestionTypes.radio,\n            rules: yup.string().oneOf(question_8, required_field).typeError(required_field)\n        },\n    ];\n\nconst QuestionSlice = createSlice({\n    name: \"question\",\n    initialState,\n    reducers: {},\n});\nconst questionReducer = QuestionSlice.reducer;\nexport { questionReducer };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}