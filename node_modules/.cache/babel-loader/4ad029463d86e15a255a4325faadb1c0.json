{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Garik\\\\Desktop\\\\task2\\\\client\\\\src\\\\components\\\\Survey\\\\Survey.tsx\";\nimport React from 'react';\nimport * as yup from \"yup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Survey = () => {\n  const validationSchema = yup.object().shape({\n    fullname: yup.string().required('Fullname is required'),\n    username: yup.string().required('Username is required').min(6, 'Username must be at least 6 characters').max(20, 'Username must not exceed 20 characters'),\n    email: yup.string().required('Email is required').email('Email is invalid'),\n    password: yup.string().required('Password is required').min(6, 'Password must be at least 6 characters').max(40, 'Password must not exceed 40 characters'),\n    confirmPassword: yup.string().required('Confirm Password is required').oneOf([yup.ref('password'), null], 'Confirm Password does not match'),\n    acceptTerms: yup.bool().oneOf([true], 'Accept Terms is required')\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n_c = Survey;\nexport default Survey;\nvar _c;\n$RefreshReg$(_c, \"Survey\");","map":{"version":3,"names":["React","yup","Survey","validationSchema","object","shape","fullname","string","required","username","min","max","email","password","confirmPassword","oneOf","ref","acceptTerms","bool"],"sources":["C:/Users/Garik/Desktop/task2/client/src/components/Survey/Survey.tsx"],"sourcesContent":["import React from 'react';\nimport * as yup from \"yup\";\n\nconst Survey = () => {\n    const validationSchema = yup.object().shape({\n        fullname: yup.string().required('Fullname is required'),\n        username: yup.string()\n            .required('Username is required')\n            .min(6, 'Username must be at least 6 characters')\n            .max(20, 'Username must not exceed 20 characters'),\n        email: yup.string()\n            .required('Email is required')\n            .email('Email is invalid'),\n        password: yup.string()\n            .required('Password is required')\n            .min(6, 'Password must be at least 6 characters')\n            .max(40, 'Password must not exceed 40 characters'),\n        confirmPassword: yup.string()\n            .required('Confirm Password is required')\n            .oneOf([yup.ref('password'), null], 'Confirm Password does not match'),\n        acceptTerms: yup.bool().oneOf([true], 'Accept Terms is required')\n    });\n\n    return (\n        <div>\n\n        </div>\n    );\n};\n\nexport default Survey;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,KAAKC,GAAG,MAAM,KAAK;AAAC;AAE3B,MAAMC,MAAM,GAAG,MAAM;EACjB,MAAMC,gBAAgB,GAAGF,GAAG,CAACG,MAAM,EAAE,CAACC,KAAK,CAAC;IACxCC,QAAQ,EAAEL,GAAG,CAACM,MAAM,EAAE,CAACC,QAAQ,CAAC,sBAAsB,CAAC;IACvDC,QAAQ,EAAER,GAAG,CAACM,MAAM,EAAE,CACjBC,QAAQ,CAAC,sBAAsB,CAAC,CAChCE,GAAG,CAAC,CAAC,EAAE,wCAAwC,CAAC,CAChDC,GAAG,CAAC,EAAE,EAAE,wCAAwC,CAAC;IACtDC,KAAK,EAAEX,GAAG,CAACM,MAAM,EAAE,CACdC,QAAQ,CAAC,mBAAmB,CAAC,CAC7BI,KAAK,CAAC,kBAAkB,CAAC;IAC9BC,QAAQ,EAAEZ,GAAG,CAACM,MAAM,EAAE,CACjBC,QAAQ,CAAC,sBAAsB,CAAC,CAChCE,GAAG,CAAC,CAAC,EAAE,wCAAwC,CAAC,CAChDC,GAAG,CAAC,EAAE,EAAE,wCAAwC,CAAC;IACtDG,eAAe,EAAEb,GAAG,CAACM,MAAM,EAAE,CACxBC,QAAQ,CAAC,8BAA8B,CAAC,CACxCO,KAAK,CAAC,CAACd,GAAG,CAACe,GAAG,CAAC,UAAU,CAAC,EAAE,IAAI,CAAC,EAAE,iCAAiC,CAAC;IAC1EC,WAAW,EAAEhB,GAAG,CAACiB,IAAI,EAAE,CAACH,KAAK,CAAC,CAAC,IAAI,CAAC,EAAE,0BAA0B;EACpE,CAAC,CAAC;EAEF,oBACI;IAAA;IAAA;IAAA;EAAA,QAEM;AAEd,CAAC;AAAC,KAzBIb,MAAM;AA2BZ,eAAeA,MAAM;AAAC;AAAA"},"metadata":{},"sourceType":"module"}