{"ast":null,"code":"export const getModalTitle = () => {\n  const survey = localStorage.getItem(\"survey\");\n  let openModal;\n  let _modalTitle;\n  if (!survey) {\n    openModal = true;\n    _modalTitle = \"Do you want to continue the survey after leaving the site and returning again?\";\n  } else {\n    openModal = true;\n    _modalTitle = \"Do you want to continue an incomplete survey?\";\n  }\n  return {\n    _modalTitle,\n    openModal\n  };\n};\nexport const getLSQuestions = () => {\n  const survey = localStorage.getItem(\"survey\");\n  let lsAnsweredQuestionsLength,\n    qIndex,\n    answeredQuestionsEntries = null;\n  if (survey) {\n    const lsAnsweredQuestions = JSON.parse(survey);\n    const answeredQuestionsEntries = Object.entries(lsAnsweredQuestions);\n    const lsAnsweredQuestionsLength = Object.keys(lsAnsweredQuestions).length;\n    const qIndex = lsAnsweredQuestionsLength > 5 ? lsAnsweredQuestionsLength - 2 : lsAnsweredQuestionsLength;\n  }\n  return {\n    lsAnsweredQuestionsLength,\n    qIndex,\n    answeredQuestionsEntries\n  };\n};\nexport const addUpdateQuestion = (answer, question, survey) => {\n  if (Array.isArray(question) && Array.isArray(answer)) {\n    question.forEach((questionItem, questionIndex) => {\n      if (survey[questionItem]) {\n        survey[questionItem] = answer[questionIndex];\n      } else {\n        survey[questionItem] = answer[questionIndex];\n      }\n    });\n  } else {\n    survey[question] = answer;\n  }\n  return survey;\n};","map":{"version":3,"names":["getModalTitle","survey","localStorage","getItem","openModal","_modalTitle","getLSQuestions","lsAnsweredQuestionsLength","qIndex","answeredQuestionsEntries","lsAnsweredQuestions","JSON","parse","Object","entries","keys","length","addUpdateQuestion","answer","question","Array","isArray","forEach","questionItem","questionIndex"],"sources":["C:/Users/Garik/Desktop/task2/client/src/utils/index.ts"],"sourcesContent":["import { ISurvey } from \"../types/index\";\n\nexport const getModalTitle = () => {\n    const survey = localStorage.getItem(\"survey\");\n    let openModal: boolean;\n    let _modalTitle: string;\n    if (!survey) {\n        openModal = true;\n        _modalTitle =\n            \"Do you want to continue the survey after leaving the site and returning again?\";\n    } else {\n        openModal = true;\n        _modalTitle = \"Do you want to continue an incomplete survey?\";\n    }\n    return { _modalTitle, openModal };\n};\n\nexport const getLSQuestions = () => {\n    const survey = localStorage.getItem(\"survey\");\n    let lsAnsweredQuestionsLength, qIndex, answeredQuestionsEntries = null;\n    if (survey) {\n        const lsAnsweredQuestions = JSON.parse(survey) as ISurvey;\n        const answeredQuestionsEntries = Object.entries(lsAnsweredQuestions);\n        const lsAnsweredQuestionsLength =\n            Object.keys(lsAnsweredQuestions).length;\n        const qIndex =\n            lsAnsweredQuestionsLength > 5\n                ? lsAnsweredQuestionsLength - 2\n                : lsAnsweredQuestionsLength;\n    }\n    return { lsAnsweredQuestionsLength, qIndex, answeredQuestionsEntries };\n};\n\nexport const addUpdateQuestion = (\n    answer: string | string[],\n    question: string | string[],\n    survey: ISurvey\n) => {\n    if (Array.isArray(question) && Array.isArray(answer)) {\n        question.forEach((questionItem, questionIndex) => {\n            if (survey[questionItem as keyof typeof survey]) {\n                survey[questionItem as keyof typeof survey] =\n                    answer[questionIndex];\n            } else {\n                survey[questionItem as keyof typeof survey] =\n                    answer[questionIndex];\n            }\n        });\n    } else {\n        survey[question as keyof typeof survey] = answer as string;\n    }\n    return survey;\n};\n"],"mappings":"AAEA,OAAO,MAAMA,aAAa,GAAG,MAAM;EAC/B,MAAMC,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;EAC7C,IAAIC,SAAkB;EACtB,IAAIC,WAAmB;EACvB,IAAI,CAACJ,MAAM,EAAE;IACTG,SAAS,GAAG,IAAI;IAChBC,WAAW,GACP,gFAAgF;EACxF,CAAC,MAAM;IACHD,SAAS,GAAG,IAAI;IAChBC,WAAW,GAAG,+CAA+C;EACjE;EACA,OAAO;IAAEA,WAAW;IAAED;EAAU,CAAC;AACrC,CAAC;AAED,OAAO,MAAME,cAAc,GAAG,MAAM;EAChC,MAAML,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;EAC7C,IAAII,yBAAyB;IAAEC,MAAM;IAAEC,wBAAwB,GAAG,IAAI;EACtE,IAAIR,MAAM,EAAE;IACR,MAAMS,mBAAmB,GAAGC,IAAI,CAACC,KAAK,CAACX,MAAM,CAAY;IACzD,MAAMQ,wBAAwB,GAAGI,MAAM,CAACC,OAAO,CAACJ,mBAAmB,CAAC;IACpE,MAAMH,yBAAyB,GAC3BM,MAAM,CAACE,IAAI,CAACL,mBAAmB,CAAC,CAACM,MAAM;IAC3C,MAAMR,MAAM,GACRD,yBAAyB,GAAG,CAAC,GACvBA,yBAAyB,GAAG,CAAC,GAC7BA,yBAAyB;EACvC;EACA,OAAO;IAAEA,yBAAyB;IAAEC,MAAM;IAAEC;EAAyB,CAAC;AAC1E,CAAC;AAED,OAAO,MAAMQ,iBAAiB,GAAG,CAC7BC,MAAyB,EACzBC,QAA2B,EAC3BlB,MAAe,KACd;EACD,IAAImB,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,IAAIC,KAAK,CAACC,OAAO,CAACH,MAAM,CAAC,EAAE;IAClDC,QAAQ,CAACG,OAAO,CAAC,CAACC,YAAY,EAAEC,aAAa,KAAK;MAC9C,IAAIvB,MAAM,CAACsB,YAAY,CAAwB,EAAE;QAC7CtB,MAAM,CAACsB,YAAY,CAAwB,GACvCL,MAAM,CAACM,aAAa,CAAC;MAC7B,CAAC,MAAM;QACHvB,MAAM,CAACsB,YAAY,CAAwB,GACvCL,MAAM,CAACM,aAAa,CAAC;MAC7B;IACJ,CAAC,CAAC;EACN,CAAC,MAAM;IACHvB,MAAM,CAACkB,QAAQ,CAAwB,GAAGD,MAAgB;EAC9D;EACA,OAAOjB,MAAM;AACjB,CAAC"},"metadata":{},"sourceType":"module"}