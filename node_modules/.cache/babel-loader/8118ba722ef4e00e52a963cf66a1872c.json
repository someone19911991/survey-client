{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Garik\\\\Desktop\\\\task2\\\\client\\\\src\\\\components\\\\Survey\\\\Survey.tsx\",\n  _s = $RefreshSig$();\nimport React, { Fragment, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { QuestionTypes } from \"../../store/types\";\nimport Input from \"../UI/Input/Input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Survey = () => {\n  _s();\n  var _question, _question$multiple, _errors$fieldName;\n  const [questionIndex, setQuestionIndex] = useState(0);\n  // const { questions } = useAppSelector((state) => state.questionReducer);\n  // const question = questions[questionIndex];\n  // let fieldName = question.fieldName;\n  // let validationSchema = yup.object().shape({\n  //     [fieldName]: question.rules,\n  // });\n  // if (!fieldName && question.multiple) {\n  //     const rulesToAdd: { [key: string]: any } = {};\n  //     question.multiple.map((q) => {\n  //         rulesToAdd[q.fieldName] = q.rules;\n  //     });\n  //     validationSchema = yup.object().shape({ ...rulesToAdd });\n  // }\n\n  const {\n    register,\n    formState: {\n      errors\n    },\n    handleSubmit\n  } = useForm({\n    resolver: yupResolver(validationSchema)\n  });\n  const onSubmit = data => {\n    console.log(data);\n    setQuestionIndex(prev => ++prev);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      outline: \"1px solid green\",\n      margin: \"10px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: question.question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [question.type === QuestionTypes.textInput && /*#__PURE__*/_jsxDEV(Input, {\n          type: \"text\",\n          ...register(fieldName)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 25\n        }, this), question.type === QuestionTypes.numberInput && /*#__PURE__*/_jsxDEV(Input, {\n          type: \"number\",\n          ...register(fieldName)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 25\n        }, this), question.type === QuestionTypes.date && /*#__PURE__*/_jsxDEV(Input, {\n          type: \"date\",\n          ...register(fieldName)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 25\n        }, this), question.type === QuestionTypes.select && /*#__PURE__*/_jsxDEV(\"select\", {\n          ...register(fieldName),\n          children: Array.isArray(question.currentValue) && question.currentValue.map(opt => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: opt,\n            children: opt\n          }, opt, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 37\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 25\n        }, this), question.type === QuestionTypes.radio && Array.isArray(question.currentValue) && question.currentValue.map(opt => /*#__PURE__*/_jsxDEV(Input, {\n          type: \"radio\",\n          label: opt,\n          value: opt,\n          ...register(fieldName)\n        }, opt, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 29\n        }, this)), question.type === QuestionTypes.multiple && ((_question = question) === null || _question === void 0 ? void 0 : (_question$multiple = _question.multiple) === null || _question$multiple === void 0 ? void 0 : _question$multiple.map(q => {\n          var _errors$q$fieldName;\n          return /*#__PURE__*/_jsxDEV(Fragment, {\n            children: [q.type === QuestionTypes.email && /*#__PURE__*/_jsxDEV(Input, {\n              label: q.inputLabel,\n              type: \"email\",\n              ...register(q.fieldName)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 37\n            }, this), q.type === QuestionTypes.textInput && /*#__PURE__*/_jsxDEV(Input, {\n              label: q.inputLabel,\n              ...register(q.fieldName)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                color: \"red\"\n              },\n              children: (_errors$q$fieldName = errors[q.fieldName]) === null || _errors$q$fieldName === void 0 ? void 0 : _errors$q$fieldName.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 33\n            }, this)]\n          }, q.inputLabel, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 29\n          }, this);\n        })), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: \"red\"\n          },\n          children: (_errors$fieldName = errors[fieldName]) === null || _errors$fieldName === void 0 ? void 0 : _errors$fieldName.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n_s(Survey, \"xDOrtf8/7zkQOcLDwZh9XnQ4Od0=\", false, function () {\n  return [useForm];\n});\n_c = Survey;\nexport default Survey;\nvar _c;\n$RefreshReg$(_c, \"Survey\");","map":{"version":3,"names":["React","Fragment","useState","useForm","yupResolver","QuestionTypes","Input","Survey","questionIndex","setQuestionIndex","register","formState","errors","handleSubmit","resolver","validationSchema","onSubmit","data","console","log","prev","outline","margin","question","type","textInput","fieldName","numberInput","date","select","Array","isArray","currentValue","map","opt","radio","multiple","q","email","inputLabel","color","message"],"sources":["C:/Users/Garik/Desktop/task2/client/src/components/Survey/Survey.tsx"],"sourcesContent":["import React, {Fragment, useState} from \"react\";\nimport { useAppSelector } from \"../../hooks/redux\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nimport { QuestionTypes } from \"../../store/types\";\nimport Input from \"../UI/Input/Input\";\n\nconst Survey = () => {\n    const [questionIndex, setQuestionIndex] = useState(0);\n    // const { questions } = useAppSelector((state) => state.questionReducer);\n    // const question = questions[questionIndex];\n    // let fieldName = question.fieldName;\n    // let validationSchema = yup.object().shape({\n    //     [fieldName]: question.rules,\n    // });\n    // if (!fieldName && question.multiple) {\n    //     const rulesToAdd: { [key: string]: any } = {};\n    //     question.multiple.map((q) => {\n    //         rulesToAdd[q.fieldName] = q.rules;\n    //     });\n    //     validationSchema = yup.object().shape({ ...rulesToAdd });\n    // }\n\n    type FormTypes = {\n        [fieldName: string]: typeof question.currentValue | string;\n    };\n\n    const {\n        register,\n        formState: { errors },\n        handleSubmit,\n    } = useForm<FormTypes>({ resolver: yupResolver(validationSchema) });\n\n    const onSubmit = (data: FormTypes) => {\n        console.log(data);\n        setQuestionIndex((prev) => ++prev);\n    };\n\n    return (\n        <div style={{ outline: \"1px solid green\", margin: \"10px\" }}>\n            <h3>{question.question}</h3>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <div>\n                    {question.type === QuestionTypes.textInput && (\n                        <Input type=\"text\" {...register(fieldName)} />\n                    )}\n                    {question.type === QuestionTypes.numberInput && (\n                        <Input type=\"number\" {...register(fieldName)} />\n                    )}\n                    {question.type === QuestionTypes.date && (\n                        <Input type=\"date\" {...register(fieldName)} />\n                    )}\n                    {question.type === QuestionTypes.select && (\n                        <select {...register(fieldName)}>\n                            {Array.isArray(question.currentValue) &&\n                                question.currentValue.map((opt) => (\n                                    <option key={opt} value={opt}>\n                                        {opt}\n                                    </option>\n                                ))}\n                        </select>\n                    )}\n                    {question.type === QuestionTypes.radio &&\n                        Array.isArray(question.currentValue) &&\n                        question.currentValue.map((opt) => (\n                            <Input\n                                type=\"radio\"\n                                label={opt}\n                                value={opt}\n                                key={opt}\n                                {...register(fieldName)}\n                            />\n                        ))}\n                    {question.type === QuestionTypes.multiple &&\n                        question?.multiple?.map((q) => (\n                            <Fragment key={q.inputLabel}>\n                                {q.type === QuestionTypes.email && (\n                                    <Input\n                                        label={q.inputLabel}\n                                        type=\"email\"\n                                        {...register(q.fieldName)}\n                                    />\n                                )}\n                                {q.type === QuestionTypes.textInput && (\n                                    <Input\n                                        label={q.inputLabel}\n                                        {...register(q.fieldName)}\n                                    />\n                                )}\n                                <p style={{ color: \"red\" }}>\n                                    {errors[q.fieldName]?.message}\n                                </p>\n                            </Fragment>\n                        ))}\n                    <p style={{ color: \"red\" }}>{errors[fieldName]?.message}</p>\n                </div>\n                <div>\n                    <button>Submit</button>\n                </div>\n            </form>\n        </div>\n    );\n};\n\nexport default Survey;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}