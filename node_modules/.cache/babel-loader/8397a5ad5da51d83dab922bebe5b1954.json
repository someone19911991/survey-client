{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Garik\\\\Desktop\\\\task2\\\\client\\\\src\\\\components\\\\Survey\\\\Survey.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useAppSelector } from \"../../hooks/redux\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nimport { QuestionTypes } from \"../../store/types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { createElement as _createElement } from \"react\";\nconst Survey = () => {\n  _s();\n  var _question$multiple, _errors$fieldName;\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const {\n    questions\n  } = useAppSelector(state => state.questionReducer);\n  const question = questions[questionIndex];\n  let fieldName = question.fieldName;\n  let validationSchema = yup.object().shape({\n    [fieldName]: question.rules\n  });\n  if (!fieldName && question.multiple) {\n    const rulesToAdd = {};\n    question.multiple.map(q => {\n      rulesToAdd[q.fieldName] = q.rules;\n    });\n    validationSchema = yup.object().shape({\n      ...rulesToAdd\n    });\n  }\n  const {\n    register,\n    formState: {\n      errors\n    },\n    handleSubmit\n  } = useForm({\n    resolver: yupResolver(validationSchema)\n  });\n  const onSubmit = data => {\n    console.log(data);\n    setQuestionIndex(prev => ++prev);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      outline: \"1px solid green\",\n      margin: \"10px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: question.question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [question.type === QuestionTypes.textInput && /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          ...register(fieldName)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 25\n        }, this), question.type === QuestionTypes.numberInput && /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          ...register(fieldName)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 25\n        }, this), question.type === QuestionTypes.date && /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          ...register(fieldName)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 25\n        }, this), question.type === QuestionTypes.select && /*#__PURE__*/_jsxDEV(\"select\", {\n          ...register(fieldName),\n          children: Array.isArray(question.currentValue) && question.currentValue.map(opt => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: opt,\n              children: opt\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              id: opt,\n              value: opt,\n              children: opt\n            }, opt, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 37\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 25\n        }, this), question.type === QuestionTypes.radio && Array.isArray(question.currentValue) && question.currentValue.map(opt => /*#__PURE__*/_createElement(\"input\", {\n          ...register(fieldName),\n          key: opt,\n          type: \"radio\",\n          value: opt,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 29\n          }\n        })), question.type === QuestionTypes.multiple && (question === null || question === void 0 ? void 0 : (_question$multiple = question.multiple) === null || _question$multiple === void 0 ? void 0 : _question$multiple.map(q => {\n          var _errors$q$fieldName;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: q.inputLabel\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 25\n            }, this), q.type === QuestionTypes.email && /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"email\",\n              ...register(q.fieldName)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 60\n            }, this), q.type === QuestionTypes.textInput && /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              ...register(q.fieldName)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 64\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                color: \"red\"\n              },\n              children: (_errors$q$fieldName = errors[q.fieldName]) === null || _errors$q$fieldName === void 0 ? void 0 : _errors$q$fieldName.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 25\n            }, this)]\n          }, q.inputLabel, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 96\n          }, this);\n        })), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: \"red\"\n          },\n          children: (_errors$fieldName = errors[fieldName]) === null || _errors$fieldName === void 0 ? void 0 : _errors$fieldName.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n_s(Survey, \"+eI3OyLOcZdPH0+Mreu5WjhKIsY=\", false, function () {\n  return [useAppSelector, useForm];\n});\n_c = Survey;\nexport default Survey;\nvar _c;\n$RefreshReg$(_c, \"Survey\");","map":{"version":3,"names":["React","useState","useAppSelector","useForm","yupResolver","yup","QuestionTypes","Survey","questionIndex","setQuestionIndex","questions","state","questionReducer","question","fieldName","validationSchema","object","shape","rules","multiple","rulesToAdd","map","q","register","formState","errors","handleSubmit","resolver","onSubmit","data","console","log","prev","outline","margin","type","textInput","numberInput","date","select","Array","isArray","currentValue","opt","radio","inputLabel","email","color","message"],"sources":["C:/Users/Garik/Desktop/task2/client/src/components/Survey/Survey.tsx"],"sourcesContent":["import React, {useState} from \"react\";\nimport {useAppSelector} from \"../../hooks/redux\";\nimport {useForm} from \"react-hook-form\";\nimport {yupResolver} from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nimport {QuestionTypes} from \"../../store/types\";\n\nconst Survey = () => {\n    const [questionIndex, setQuestionIndex] = useState(0);\n    const { questions } = useAppSelector((state) => state.questionReducer);\n    const question = questions[questionIndex];\n    let fieldName = question.fieldName;\n    let validationSchema = yup.object().shape({\n        [fieldName]: question.rules,\n    });\n    if(!fieldName && question.multiple){\n        const rulesToAdd: {[key: string]: any} = {};\n        question.multiple.map(q => {\n            rulesToAdd[q.fieldName] = q.rules\n        });\n        validationSchema = yup.object().shape({...rulesToAdd})\n    }\n\n\n    type FormTypes = { [fieldName: string]: typeof question.currentValue | string};\n\n    const {\n        register,\n        formState: { errors },\n        handleSubmit,\n    } = useForm<FormTypes>({ resolver: yupResolver(validationSchema) });\n\n    const onSubmit = (data: FormTypes) => {\n        console.log(data);\n        setQuestionIndex((prev) => ++prev);\n    };\n\n    return (\n        <div style={{ outline: \"1px solid green\", margin: \"10px\" }}>\n            <h3>{question.question}</h3>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <div>\n                    {question.type === QuestionTypes.textInput && (\n                        <input type=\"text\" {...register(fieldName)} />\n                    )}\n                    {question.type === QuestionTypes.numberInput && (\n                        <input type=\"number\" {...register(fieldName)} />\n                    )}\n                    {question.type === QuestionTypes.date && (\n                        <input type=\"date\" {...register(fieldName)} />\n                    )}\n                    {question.type === QuestionTypes.select && (\n                        <select {...register(fieldName)}>\n                            {Array.isArray(question.currentValue) &&\n                                question.currentValue.map((opt ) => (\n                                    <div>\n                                        <label htmlFor={opt}>{opt}</label>\n                                        <option id={opt} key={opt} value={opt}>\n                                            {opt}\n                                        </option>\n                                    </div>\n                                ))\n                            }\n                        </select>\n                    )}\n                    {question.type === QuestionTypes.radio &&\n                        Array.isArray(question.currentValue) &&\n                        question.currentValue.map((opt) => (\n                            <input {...register(fieldName)} key={opt} type=\"radio\" value={opt} />\n                        ))}\n                    {question.type === QuestionTypes.multiple && question?.multiple?.map(q => (<div key={q.inputLabel}>\n                        <h4>{q.inputLabel}</h4>\n                        {q.type === QuestionTypes.email && <input type=\"email\" {...register(q.fieldName)}/>}\n                        {q.type === QuestionTypes.textInput && <input type=\"text\" {...register(q.fieldName)}/>}\n                        <p style={{ color: \"red\" }}>{errors[q.fieldName]?.message}</p>\n                    </div>))}\n                    <p style={{ color: \"red\" }}>\n                        {errors[fieldName]?.message}\n                    </p>\n                </div>\n                <div>\n                    <button>Submit</button>\n                </div>\n            </form>\n        </div>\n    );\n};\n\nexport default Survey;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}