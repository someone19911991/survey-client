{"ast":null,"code":"import { QuestionTypes } from \"./store/types\";\nimport * as yup from \"yup\";\nexport const question_2 = [\"Yes\", \"No\", \"Not sure\"];\nexport const question_3 = [\"PC DVD-ROM\", \"Macintosh DVD-ROM\", \"Sony PlayStation 2/Microsoft X-Box\", \"Console Top DVD player\", \"None\", \"Other\"];\nexport const question_4 = [\"Purchase\", \"Rent\"];\nexport const question_8 = [\"male\", \"female\"];\nexport const required_field = \"This field is required\";\nexport const no_match = \"No match for this value\";\nexport const validDateRegex = /^\\d{4}\\-(0?[1-9]|1[012])\\-(0?[1-9]|[12][0-9]|3[01])$/;\nexport const questions = [{\n  question: \"When would you purchase a DVD player if you don't already own one?\",\n  fieldName: \"question_1\",\n  currentValue: \"\",\n  type: QuestionTypes.textInput,\n  rules: yup.string().trim().required(required_field)\n}, {\n  question: \"Would you be interested in software that allows you to have control over profanity, nudity, and violence in movies?\",\n  fieldName: \"question_2\",\n  currentValue: question_2,\n  type: QuestionTypes.radio,\n  rules: yup.string().oneOf(question_2, no_match).typeError(required_field)\n}, {\n  question: \"What type of DVD player do you own?\",\n  fieldName: \"question_3\",\n  currentValue: question_3,\n  type: QuestionTypes.select,\n  rules: yup.string().oneOf(question_3, no_match).typeError(required_field)\n}, {\n  question: \"Do you mainly purchase or rent movies you view?\",\n  fieldName: \"question_4\",\n  currentValue: question_4,\n  type: QuestionTypes.radio,\n  rules: yup.string().oneOf(question_4, required_field).typeError(required_field)\n}, {\n  question: \"How much do you spend renting and/or buying movies per month(in USD)?\",\n  fieldName: \"question_5\",\n  currentValue: 0,\n  type: QuestionTypes.numberInput,\n  rules: yup.number().required(required_field).typeError(\"Numeric values only accepted\")\n}, {\n  question: \"Type your first name, last name and email address\",\n  fieldName: \"\",\n  type: QuestionTypes.multiple,\n  multiple: [{\n    fieldName: \"first_name\",\n    inputLabel: \"First name\",\n    currentValue: \"\",\n    type: QuestionTypes.textInput,\n    rules: yup.string().trim().required(\"First name is required\")\n  }, {\n    fieldName: \"last_name\",\n    inputLabel: \"Last name\",\n    currentValue: \"\",\n    type: QuestionTypes.textInput,\n    rules: yup.string().trim().required(\"Last name is required\")\n  }, {\n    fieldName: \"email\",\n    inputLabel: \"Email\",\n    currentValue: \"\",\n    type: QuestionTypes.email,\n    rules: yup.string().trim().email().required(\"Email is required\")\n  }]\n}, {\n  question: \"When is your birthday?\",\n  fieldName: \"question_7\",\n  currentValue: \"1997-12-12\",\n  type: QuestionTypes.date,\n  rules: yup.string().matches(validDateRegex, \"Invalid date\")\n}, {\n  question: \"What is your gender?\",\n  fieldName: \"question_8\",\n  currentValue: question_8,\n  type: QuestionTypes.radio,\n  rules: yup.string().oneOf(question_8, required_field).typeError(required_field)\n}];","map":{"version":3,"names":["QuestionTypes","yup","question_2","question_3","question_4","question_8","required_field","no_match","validDateRegex","questions","question","fieldName","currentValue","type","textInput","rules","string","trim","required","radio","oneOf","typeError","select","numberInput","number","multiple","inputLabel","email","date","matches"],"sources":["C:/Users/Garik/Desktop/task2/client/src/consts.ts"],"sourcesContent":["import { IQuestion, QuestionTypes } from \"./store/types\";\nimport * as yup from \"yup\";\n\nexport const question_2 = [\"Yes\", \"No\", \"Not sure\"];\nexport const question_3 = [\n    \"PC DVD-ROM\",\n    \"Macintosh DVD-ROM\",\n    \"Sony PlayStation 2/Microsoft X-Box\",\n    \"Console Top DVD player\",\n    \"None\",\n    \"Other\",\n];\nexport const question_4 = [\"Purchase\", \"Rent\"];\nexport const question_8 = [\"male\", \"female\"];\nexport const required_field = \"This field is required\";\nexport const no_match = \"No match for this value\";\nexport const validDateRegex =\n    /^\\d{4}\\-(0?[1-9]|1[012])\\-(0?[1-9]|[12][0-9]|3[01])$/;\n\nexport const questions: IQuestion[] = [\n    {\n        question:\n            \"When would you purchase a DVD player if you don't already own one?\",\n        fieldName: \"question_1\",\n        currentValue: \"\",\n        type: QuestionTypes.textInput,\n        rules: yup.string().trim().required(required_field),\n    },\n    {\n        question:\n            \"Would you be interested in software that allows you to have control over profanity, nudity, and violence in movies?\",\n        fieldName: \"question_2\",\n        currentValue: question_2,\n        type: QuestionTypes.radio,\n        rules: yup\n            .string()\n            .oneOf(question_2, no_match)\n            .typeError(required_field),\n    },\n    {\n        question: \"What type of DVD player do you own?\",\n        fieldName: \"question_3\",\n        currentValue: question_3,\n        type: QuestionTypes.select,\n        rules: yup\n            .string()\n            .oneOf(question_3, no_match)\n            .typeError(required_field),\n    },\n    {\n        question: \"Do you mainly purchase or rent movies you view?\",\n        fieldName: \"question_4\",\n        currentValue: question_4,\n        type: QuestionTypes.radio,\n        rules: yup\n            .string()\n            .oneOf(question_4, required_field)\n            .typeError(required_field),\n    },\n    {\n        question:\n            \"How much do you spend renting and/or buying movies per month(in USD)?\",\n        fieldName: \"question_5\",\n        currentValue: 0,\n        type: QuestionTypes.numberInput,\n        rules: yup\n            .number()\n            .required(required_field)\n            .typeError(\"Numeric values only accepted\"),\n    },\n    {\n        question: \"Type your first name, last name and email address\",\n        fieldName: \"\",\n        type: QuestionTypes.multiple,\n        multiple: [\n            {\n                fieldName: \"first_name\",\n                inputLabel: \"First name\",\n                currentValue: \"\",\n                type: QuestionTypes.textInput,\n                rules: yup.string().trim().required(\"First name is required\"),\n            },\n            {\n                fieldName: \"last_name\",\n                inputLabel: \"Last name\",\n                currentValue: \"\",\n                type: QuestionTypes.textInput,\n                rules: yup.string().trim().required(\"Last name is required\"),\n            },\n            {\n                fieldName: \"email\",\n                inputLabel: \"Email\",\n                currentValue: \"\",\n                type: QuestionTypes.email,\n                rules: yup\n                    .string()\n                    .trim()\n                    .email()\n                    .required(\"Email is required\"),\n            },\n        ],\n    },\n    {\n        question: \"When is your birthday?\",\n        fieldName: \"question_7\",\n        currentValue: \"1997-12-12\",\n        type: QuestionTypes.date,\n        rules: yup.string().matches(validDateRegex, \"Invalid date\"),\n    },\n    {\n        question: \"What is your gender?\",\n        fieldName: \"question_8\",\n        currentValue: question_8,\n        type: QuestionTypes.radio,\n        rules: yup\n            .string()\n            .oneOf(question_8, required_field)\n            .typeError(required_field),\n    },\n];\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}