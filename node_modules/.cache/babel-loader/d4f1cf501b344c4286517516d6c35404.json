{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Garik\\\\Desktop\\\\task2\\\\client\\\\src\\\\components\\\\Survey\\\\Survey.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { useAppSelector } from \"../../hooks/redux\";\nimport * as yup from \"yup\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Survey = () => {\n  _s();\n  const {\n    questions\n  } = useAppSelector(state => state.questionReducer);\n  const question = questions[0];\n  const questionLabel = question.inputLabel;\n\n  // @ts-ignore\n  const schema = yup.object().shape({\n    [questionLabel]: question.rules\n  });\n  console.log({\n    schema\n  });\n  const {\n    register,\n    watch,\n    handleSubmit,\n    formState: {\n      errors\n    }\n  } = useForm({\n    resolver: yupResolver(schema)\n  });\n  const onSubmit = data => console.log(data);\n  useEffect(() => {\n    const subscription = watch((value, _ref) => {\n      let {\n        name,\n        type\n      } = _ref;\n      return console.log(value, name, type);\n    });\n    return () => subscription.unsubscribe();\n  }, [watch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      children: [!Array.isArray(questionLabel) && /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        ...register(questionLabel)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n_s(Survey, \"bSImoPhSNcN+ePjj+4l3CDez468=\", false, function () {\n  return [useAppSelector, useForm];\n});\n_c = Survey;\nexport default Survey;\nvar _c;\n$RefreshReg$(_c, \"Survey\");","map":{"version":3,"names":["React","useEffect","useAppSelector","yup","useForm","yupResolver","Survey","questions","state","questionReducer","question","questionLabel","inputLabel","schema","object","shape","rules","console","log","register","watch","handleSubmit","formState","errors","resolver","onSubmit","data","subscription","value","name","type","unsubscribe","Array","isArray"],"sources":["C:/Users/Garik/Desktop/task2/client/src/components/Survey/Survey.tsx"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport { useAppSelector } from \"../../hooks/redux\";\nimport * as yup from \"yup\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\n\nconst Survey = () => {\n    const { questions } = useAppSelector((state) => state.questionReducer);\n    const question = questions[0];\n    const questionLabel = question.inputLabel;\n    \n    // @ts-ignore\n    const schema = yup.object().shape({ [questionLabel]: question.rules });\n    console.log({schema});\n    const {\n        register,\n        watch,\n        handleSubmit,\n        formState: { errors },\n    } = useForm({ resolver: yupResolver(schema) });\n\n    const onSubmit = (data: any) => console.log(data);\n\n    useEffect(() => {\n        const subscription = watch((value, { name, type }) =>\n            console.log(value, name, type)\n        );\n        return () => subscription.unsubscribe();\n    }, [watch]);\n\n    return (\n        <div>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                {!Array.isArray(questionLabel) && (\n                    <input type=\"text\" {...register(questionLabel)} />\n                )}\n                {/*<p>{JSON.stringify(errors.question_1)}</p>*/}\n                <div>\n                    <button>Submit</button>\n                </div>\n            </form>\n        </div>\n    );\n};\n\nexport default Survey;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,cAAc,QAAQ,mBAAmB;AAClD,OAAO,KAAKC,GAAG,MAAM,KAAK;AAC1B,SAASC,OAAO,QAAQ,iBAAiB;AACzC,SAASC,WAAW,QAAQ,yBAAyB;AAAC;AAEtD,MAAMC,MAAM,GAAG,MAAM;EAAA;EACjB,MAAM;IAAEC;EAAU,CAAC,GAAGL,cAAc,CAAEM,KAAK,IAAKA,KAAK,CAACC,eAAe,CAAC;EACtE,MAAMC,QAAQ,GAAGH,SAAS,CAAC,CAAC,CAAC;EAC7B,MAAMI,aAAa,GAAGD,QAAQ,CAACE,UAAU;;EAEzC;EACA,MAAMC,MAAM,GAAGV,GAAG,CAACW,MAAM,EAAE,CAACC,KAAK,CAAC;IAAE,CAACJ,aAAa,GAAGD,QAAQ,CAACM;EAAM,CAAC,CAAC;EACtEC,OAAO,CAACC,GAAG,CAAC;IAACL;EAAM,CAAC,CAAC;EACrB,MAAM;IACFM,QAAQ;IACRC,KAAK;IACLC,YAAY;IACZC,SAAS,EAAE;MAAEC;IAAO;EACxB,CAAC,GAAGnB,OAAO,CAAC;IAAEoB,QAAQ,EAAEnB,WAAW,CAACQ,MAAM;EAAE,CAAC,CAAC;EAE9C,MAAMY,QAAQ,GAAIC,IAAS,IAAKT,OAAO,CAACC,GAAG,CAACQ,IAAI,CAAC;EAEjDzB,SAAS,CAAC,MAAM;IACZ,MAAM0B,YAAY,GAAGP,KAAK,CAAC,CAACQ,KAAK;MAAA,IAAE;QAAEC,IAAI;QAAEC;MAAK,CAAC;MAAA,OAC7Cb,OAAO,CAACC,GAAG,CAACU,KAAK,EAAEC,IAAI,EAAEC,IAAI,CAAC;IAAA,EACjC;IACD,OAAO,MAAMH,YAAY,CAACI,WAAW,EAAE;EAC3C,CAAC,EAAE,CAACX,KAAK,CAAC,CAAC;EAEX,oBACI;IAAA,uBACI;MAAM,QAAQ,EAAEC,YAAY,CAACI,QAAQ,CAAE;MAAA,WAClC,CAACO,KAAK,CAACC,OAAO,CAACtB,aAAa,CAAC,iBAC1B;QAAO,IAAI,EAAC,MAAM;QAAA,GAAKQ,QAAQ,CAACR,aAAa;MAAC;QAAA;QAAA;QAAA;MAAA,QACjD,eAED;QAAA,uBACI;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAuB;QAAA;QAAA;QAAA;MAAA,QACrB;IAAA;MAAA;MAAA;MAAA;IAAA;EACH;IAAA;IAAA;IAAA;EAAA,QACL;AAEd,CAAC;AAAC,GArCIL,MAAM;EAAA,QACcJ,cAAc,EAYhCE,OAAO;AAAA;AAAA,KAbTE,MAAM;AAuCZ,eAAeA,MAAM;AAAC;AAAA"},"metadata":{},"sourceType":"module"}