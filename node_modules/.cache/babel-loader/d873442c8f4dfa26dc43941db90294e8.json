{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Garik\\\\Desktop\\\\task2\\\\client\\\\src\\\\components\\\\Survey\\\\Survey.tsx\",\n  _s = $RefreshSig$();\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { QuestionTypes } from \"../../store/types\";\nimport Input from \"../UI/Input/Input\";\nimport { useQuestion } from \"../../hooks\";\nimport Select from \"../UI/Select/Select\";\nimport { QuestionTitle, SButton, Wrapper, ErrorMsg } from \"./Survey.styled\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Survey = () => {\n  _s();\n  var _question$multiple, _errors$fieldName;\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const {\n    question,\n    fieldName,\n    validationSchema,\n    questions\n  } = useQuestion(questionIndex);\n  const {\n    register,\n    formState: {\n      errors\n    },\n    handleSubmit\n  } = useForm({\n    resolver: yupResolver(validationSchema)\n  });\n  const onSubmit = data => {\n    console.log(data);\n    let survey = localStorage.getItem('survey');\n    if (survey) {\n      survey = JSON.parse(survey);\n      console.log(survey);\n      // survey.answers.push(Object)\n    }\n\n    setQuestionIndex(prev => ++prev);\n  };\n  useEffect(() => {\n    const survey = localStorage.getItem(\"survey\");\n    if (survey) {\n      console.log(survey);\n    } else {\n      const answer = window.confirm(\"Would you like to continue your survey after quitting the page?\");\n      if (answer) {\n        localStorage.setItem(\"survey\", JSON.stringify({\n          answers: [],\n          questionIndex\n        }));\n      } else {\n        localStorage.removeItem(\"survey\");\n      }\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        marginBottom: \"50px\"\n      },\n      children: [\"Question \", questionIndex + 1, \"/\", questions.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(QuestionTitle, {\n      children: question.question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      children: [question.type === QuestionTypes.textInput && /*#__PURE__*/_jsxDEV(Input, {\n        type: \"text\",\n        ...register(fieldName)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }, this), question.type === QuestionTypes.numberInput && /*#__PURE__*/_jsxDEV(Input, {\n        type: \"number\",\n        ...register(fieldName)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this), question.type === QuestionTypes.date && /*#__PURE__*/_jsxDEV(Input, {\n        type: \"date\",\n        ...register(fieldName)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }, this), question.type === QuestionTypes.select && /*#__PURE__*/_jsxDEV(Select, {\n        items: Array.isArray(question.currentValue) ? question.currentValue : [],\n        ...register(fieldName)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this), question.type === QuestionTypes.radio && Array.isArray(question.currentValue) && question.currentValue.map(opt => /*#__PURE__*/_jsxDEV(Input, {\n        type: \"radio\",\n        label: opt,\n        value: opt,\n        ...register(fieldName)\n      }, opt, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 25\n      }, this)), question.type === QuestionTypes.multiple && (question === null || question === void 0 ? void 0 : (_question$multiple = question.multiple) === null || _question$multiple === void 0 ? void 0 : _question$multiple.map(q => {\n        var _errors$q$fieldName;\n        return /*#__PURE__*/_jsxDEV(Fragment, {\n          children: [q.type === QuestionTypes.email && /*#__PURE__*/_jsxDEV(Input, {\n            label: q.inputLabel,\n            type: \"email\",\n            ...register(q.fieldName)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 33\n          }, this), q.type === QuestionTypes.textInput && /*#__PURE__*/_jsxDEV(Input, {\n            label: q.inputLabel,\n            ...register(q.fieldName)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: \"red\"\n            },\n            children: (_errors$q$fieldName = errors[q.fieldName]) === null || _errors$q$fieldName === void 0 ? void 0 : _errors$q$fieldName.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 29\n          }, this)]\n        }, q.inputLabel, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }, this);\n      })), /*#__PURE__*/_jsxDEV(ErrorMsg, {\n        children: (_errors$fieldName = errors[fieldName]) === null || _errors$fieldName === void 0 ? void 0 : _errors$fieldName.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(SButton, {\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n_s(Survey, \"u/jCMqBD6UI3pH945wQWGOlm9Co=\", false, function () {\n  return [useQuestion, useForm];\n});\n_c = Survey;\nexport default Survey;\nvar _c;\n$RefreshReg$(_c, \"Survey\");","map":{"version":3,"names":["React","Fragment","useEffect","useState","useForm","yupResolver","QuestionTypes","Input","useQuestion","Select","QuestionTitle","SButton","Wrapper","ErrorMsg","Survey","questionIndex","setQuestionIndex","question","fieldName","validationSchema","questions","register","formState","errors","handleSubmit","resolver","onSubmit","data","console","log","survey","localStorage","getItem","JSON","parse","prev","answer","window","confirm","setItem","stringify","answers","removeItem","marginBottom","length","type","textInput","numberInput","date","select","Array","isArray","currentValue","radio","map","opt","multiple","q","email","inputLabel","color","message"],"sources":["C:/Users/Garik/Desktop/task2/client/src/components/Survey/Survey.tsx"],"sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { QuestionTypes } from \"../../store/types\";\nimport Input from \"../UI/Input/Input\";\nimport { useQuestion } from \"../../hooks\";\nimport Select from \"../UI/Select/Select\";\nimport { QuestionTitle, SButton, Wrapper, ErrorMsg } from \"./Survey.styled\";\n\nconst Survey = () => {\n    const [questionIndex, setQuestionIndex] = useState(0);\n    const { question, fieldName, validationSchema, questions } =\n        useQuestion(questionIndex);\n\n    type FormTypes = {\n        [fieldName: string]: typeof question.currentValue | string;\n    };\n\n    const {\n        register,\n        formState: { errors },\n        handleSubmit,\n    } = useForm<FormTypes>({ resolver: yupResolver(validationSchema) });\n\n    const onSubmit = (data: FormTypes) => {\n        console.log(data);\n        let survey = localStorage.getItem('survey');\n        if(survey){\n            survey = JSON.parse(survey);\n            console.log(survey);\n            // survey.answers.push(Object)\n        }\n        setQuestionIndex((prev) => ++prev);\n    };\n\n    useEffect(() => {\n        const survey = localStorage.getItem(\"survey\");\n        if (survey) {\n            console.log(survey);\n        } else {\n            const answer = window.confirm(\n                \"Would you like to continue your survey after quitting the page?\"\n            );\n            if (answer) {\n                localStorage.setItem(\n                    \"survey\",\n                    JSON.stringify({ answers: [], questionIndex })\n                );\n            } else {\n                localStorage.removeItem(\"survey\");\n            }\n        }\n    }, []);\n\n    return (\n        <Wrapper>\n            <h1 style={{ marginBottom: \"50px\" }}>\n                Question {questionIndex + 1}/{questions.length}\n            </h1>\n            <QuestionTitle>{question.question}</QuestionTitle>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                {question.type === QuestionTypes.textInput && (\n                    <Input type=\"text\" {...register(fieldName)} />\n                )}\n                {question.type === QuestionTypes.numberInput && (\n                    <Input type=\"number\" {...register(fieldName)} />\n                )}\n                {question.type === QuestionTypes.date && (\n                    <Input type=\"date\" {...register(fieldName)} />\n                )}\n                {question.type === QuestionTypes.select && (\n                    <Select\n                        items={\n                            Array.isArray(question.currentValue)\n                                ? question.currentValue\n                                : []\n                        }\n                        {...register(fieldName)}\n                    />\n                )}\n                {question.type === QuestionTypes.radio &&\n                    Array.isArray(question.currentValue) &&\n                    question.currentValue.map((opt) => (\n                        <Input\n                            type=\"radio\"\n                            label={opt}\n                            value={opt}\n                            key={opt}\n                            {...register(fieldName)}\n                        />\n                    ))}\n                {question.type === QuestionTypes.multiple &&\n                    question?.multiple?.map((q) => (\n                        <Fragment key={q.inputLabel}>\n                            {q.type === QuestionTypes.email && (\n                                <Input\n                                    label={q.inputLabel}\n                                    type=\"email\"\n                                    {...register(q.fieldName)}\n                                />\n                            )}\n                            {q.type === QuestionTypes.textInput && (\n                                <Input\n                                    label={q.inputLabel}\n                                    {...register(q.fieldName)}\n                                />\n                            )}\n                            <p style={{ color: \"red\" }}>\n                                {errors[q.fieldName]?.message}\n                            </p>\n                        </Fragment>\n                    ))}\n                <ErrorMsg>{errors[fieldName]?.message}</ErrorMsg>\n                <div>\n                    <SButton>Submit</SButton>\n                </div>\n            </form>\n        </Wrapper>\n    );\n};\n\nexport default Survey;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}