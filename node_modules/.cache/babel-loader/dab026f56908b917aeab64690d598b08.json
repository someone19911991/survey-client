{"ast":null,"code":"export const addUpdateQuestion = (answer, question, survey) => {\n  const existingItemIndex = survey.findIndex(item => item.question === question);\n  if (existingItemIndex !== -1) {\n    survey.push({\n      answer,\n      question\n    });\n  } else {\n    survey.map(item => {\n      if (item.question === question) {\n        return {\n          answer,\n          question\n        };\n      }\n      return item;\n    });\n  }\n  return survey;\n};\nexport const checkSurveyInLS = (answerToPass, question) => {\n  let survey = localStorage.getItem(\"survey\");\n  if (survey) {\n    const parsedSurvey = JSON.parse(survey);\n    const existingAnswerIndex = parsedSurvey.findIndex(item => item.question === question);\n    if (existingAnswerIndex !== -1) {\n      parsedSurvey.splice(existingAnswerIndex, 1, {\n        question,\n        answer: answerToPass\n      });\n    } else {\n      parsedSurvey.push({\n        question: question,\n        answer: answerToPass\n      });\n    }\n    localStorage.setItem(\"survey\", JSON.stringify(parsedSurvey));\n  }\n};","map":{"version":3,"names":["addUpdateQuestion","answer","question","survey","existingItemIndex","findIndex","item","push","map","checkSurveyInLS","answerToPass","localStorage","getItem","parsedSurvey","JSON","parse","existingAnswerIndex","splice","setItem","stringify"],"sources":["C:/Users/Garik/Desktop/task2/client/src/utils/index.ts"],"sourcesContent":["import {ISurvey} from \"../components/Survey/Survey\";\r\n\r\nexport const addUpdateQuestion = (answer: string, question: string, survey: ISurvey[]) => {\r\n    const existingItemIndex = survey.findIndex(item => item.question === question);\r\n    if(existingItemIndex !== -1){\r\n        survey.push({answer, question});\r\n    }else{\r\n        survey.map(item => {\r\n            if(item.question === question){\r\n                return {answer, question};\r\n            }\r\n            return item;\r\n        })\r\n    }\r\n    return survey;\r\n}\r\n\r\nexport const checkSurveyInLS = (answerToPass: string, question: string) => {\r\n    let survey = localStorage.getItem(\"survey\");\r\n    if (survey) {\r\n        const parsedSurvey = JSON.parse(survey) as ISurvey[];\r\n        const existingAnswerIndex = parsedSurvey.findIndex(\r\n            (item) => item.question === question\r\n        );\r\n        if (existingAnswerIndex !== -1) {\r\n            parsedSurvey.splice(existingAnswerIndex, 1, {\r\n                question,\r\n                answer: answerToPass,\r\n            });\r\n        } else {\r\n            parsedSurvey.push({\r\n                question: question,\r\n                answer: answerToPass,\r\n            });\r\n        }\r\n\r\n        localStorage.setItem(\"survey\", JSON.stringify(parsedSurvey));\r\n    }\r\n}"],"mappings":"AAEA,OAAO,MAAMA,iBAAiB,GAAG,CAACC,MAAc,EAAEC,QAAgB,EAAEC,MAAiB,KAAK;EACtF,MAAMC,iBAAiB,GAAGD,MAAM,CAACE,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACJ,QAAQ,KAAKA,QAAQ,CAAC;EAC9E,IAAGE,iBAAiB,KAAK,CAAC,CAAC,EAAC;IACxBD,MAAM,CAACI,IAAI,CAAC;MAACN,MAAM;MAAEC;IAAQ,CAAC,CAAC;EACnC,CAAC,MAAI;IACDC,MAAM,CAACK,GAAG,CAACF,IAAI,IAAI;MACf,IAAGA,IAAI,CAACJ,QAAQ,KAAKA,QAAQ,EAAC;QAC1B,OAAO;UAACD,MAAM;UAAEC;QAAQ,CAAC;MAC7B;MACA,OAAOI,IAAI;IACf,CAAC,CAAC;EACN;EACA,OAAOH,MAAM;AACjB,CAAC;AAED,OAAO,MAAMM,eAAe,GAAG,CAACC,YAAoB,EAAER,QAAgB,KAAK;EACvE,IAAIC,MAAM,GAAGQ,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;EAC3C,IAAIT,MAAM,EAAE;IACR,MAAMU,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACZ,MAAM,CAAc;IACpD,MAAMa,mBAAmB,GAAGH,YAAY,CAACR,SAAS,CAC7CC,IAAI,IAAKA,IAAI,CAACJ,QAAQ,KAAKA,QAAQ,CACvC;IACD,IAAIc,mBAAmB,KAAK,CAAC,CAAC,EAAE;MAC5BH,YAAY,CAACI,MAAM,CAACD,mBAAmB,EAAE,CAAC,EAAE;QACxCd,QAAQ;QACRD,MAAM,EAAES;MACZ,CAAC,CAAC;IACN,CAAC,MAAM;MACHG,YAAY,CAACN,IAAI,CAAC;QACdL,QAAQ,EAAEA,QAAQ;QAClBD,MAAM,EAAES;MACZ,CAAC,CAAC;IACN;IAEAC,YAAY,CAACO,OAAO,CAAC,QAAQ,EAAEJ,IAAI,CAACK,SAAS,CAACN,YAAY,CAAC,CAAC;EAChE;AACJ,CAAC"},"metadata":{},"sourceType":"module"}