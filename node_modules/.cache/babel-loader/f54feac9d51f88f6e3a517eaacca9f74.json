{"ast":null,"code":"import * as yup from \"yup\";\nimport { questions } from \"../consts\";\nexport const useQuestion = questionIndex => {\n  questionIndex = questionIndex > 5 ? questionIndex - 2 : questionIndex;\n  const question = questions[questionIndex];\n  // console.log(question, questionIndex);\n  let fieldName = question.fieldName;\n  // let validationSchema = yup.object().shape({\n  //     [fieldName]: question.rules,\n  // });\n  let validationSchema;\n  if (!fieldName && question.multiple) {\n    const rulesToAdd = {};\n    question.multiple.map(q => {\n      rulesToAdd[q.fieldName] = q.rules;\n    });\n    validationSchema = yup.object().shape({\n      ...rulesToAdd\n    });\n  } else {\n    validationSchema = yup.object().shape({\n      [fieldName]: question.rules\n    });\n  }\n  return {\n    questions,\n    question,\n    fieldName,\n    validationSchema\n  };\n};","map":{"version":3,"names":["yup","questions","useQuestion","questionIndex","question","fieldName","validationSchema","multiple","rulesToAdd","map","q","rules","object","shape"],"sources":["C:/Users/Garik/Desktop/task2/client/src/hooks/index.ts"],"sourcesContent":["import * as yup from \"yup\";\nimport { questions } from \"../consts\";\n\nexport const useQuestion = (questionIndex: number) => {\n    questionIndex = questionIndex > 5 ? questionIndex - 2 : questionIndex;\n    const question = questions[questionIndex];\n    // console.log(question, questionIndex);\n    let fieldName = question.fieldName;\n    // let validationSchema = yup.object().shape({\n    //     [fieldName]: question.rules,\n    // });\n    let validationSchema: any;\n    if (!fieldName && question.multiple) {\n        const rulesToAdd: { [key: string]: any } = {};\n        question.multiple.map((q) => {\n            rulesToAdd[q.fieldName] = q.rules;\n        });\n        validationSchema = yup.object().shape({ ...rulesToAdd });\n    } else {\n        validationSchema = yup.object().shape({\n            [fieldName]: question.rules,\n        });\n    }\n\n    return { questions, question, fieldName, validationSchema };\n};\n"],"mappings":"AAAA,OAAO,KAAKA,GAAG,MAAM,KAAK;AAC1B,SAASC,SAAS,QAAQ,WAAW;AAErC,OAAO,MAAMC,WAAW,GAAIC,aAAqB,IAAK;EAClDA,aAAa,GAAGA,aAAa,GAAG,CAAC,GAAGA,aAAa,GAAG,CAAC,GAAGA,aAAa;EACrE,MAAMC,QAAQ,GAAGH,SAAS,CAACE,aAAa,CAAC;EACzC;EACA,IAAIE,SAAS,GAAGD,QAAQ,CAACC,SAAS;EAClC;EACA;EACA;EACA,IAAIC,gBAAqB;EACzB,IAAI,CAACD,SAAS,IAAID,QAAQ,CAACG,QAAQ,EAAE;IACjC,MAAMC,UAAkC,GAAG,CAAC,CAAC;IAC7CJ,QAAQ,CAACG,QAAQ,CAACE,GAAG,CAAEC,CAAC,IAAK;MACzBF,UAAU,CAACE,CAAC,CAACL,SAAS,CAAC,GAAGK,CAAC,CAACC,KAAK;IACrC,CAAC,CAAC;IACFL,gBAAgB,GAAGN,GAAG,CAACY,MAAM,EAAE,CAACC,KAAK,CAAC;MAAE,GAAGL;IAAW,CAAC,CAAC;EAC5D,CAAC,MAAM;IACHF,gBAAgB,GAAGN,GAAG,CAACY,MAAM,EAAE,CAACC,KAAK,CAAC;MAClC,CAACR,SAAS,GAAGD,QAAQ,CAACO;IAC1B,CAAC,CAAC;EACN;EAEA,OAAO;IAAEV,SAAS;IAAEG,QAAQ;IAAEC,SAAS;IAAEC;EAAiB,CAAC;AAC/D,CAAC"},"metadata":{},"sourceType":"module"}