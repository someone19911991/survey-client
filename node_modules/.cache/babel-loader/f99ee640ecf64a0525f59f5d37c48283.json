{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Garik\\\\Desktop\\\\task2\\\\client\\\\src\\\\components\\\\Survey\\\\Survey.tsx\",\n  _s = $RefreshSig$();\nimport React, { Fragment, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { QuestionTypes } from \"../../store/types\";\nimport Input from \"../UI/Input/Input\";\nimport { useQuestion } from \"../../hooks\";\nimport styled from \"styled-components\";\nimport Select from \"../UI/Select/Select\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Survey = () => {\n  _s();\n  var _question$multiple, _errors$fieldName;\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const {\n    question,\n    fieldName,\n    validationSchema\n  } = useQuestion(questionIndex);\n  const {\n    register,\n    formState: {\n      errors\n    },\n    handleSubmit\n  } = useForm({\n    resolver: yupResolver(validationSchema)\n  });\n  const onSubmit = data => {\n    console.log(data);\n    setQuestionIndex(prev => ++prev);\n  };\n  const Wrapper = styled.div`\n        width: 100%;\n        max-width: 1000px;\n        min-width: 500px;\n        height: 100vh;\n        margin: 0 auto;\n        padding: 10px;\n        background-color: lightgrey;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        flex-direction: column;\n    `;\n  const SButton = styled.button`\n        padding: 10px 15px;\n        color: #fff;\n        background-color: teal;\n        outline: 0;\n        border: 0;\n        border-radius: 5px;\n        transition: all 0.2s ease-in-out;\n        margin: 10px 0;\n        &:hover {\n            color: teal;\n            background-color: #fff;\n            cursor: pointer;\n        }\n    `;\n  const ErrorMsg = styled.p`\n        color: red;\n        height: 20px;\n        width: 100%;\n    `;\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        color: 'darkred'\n      },\n      children: question.question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [question.type === QuestionTypes.textInput && /*#__PURE__*/_jsxDEV(Input, {\n          type: \"text\",\n          ...register(fieldName)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 25\n        }, this), question.type === QuestionTypes.numberInput && /*#__PURE__*/_jsxDEV(Input, {\n          type: \"number\",\n          ...register(fieldName)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 25\n        }, this), question.type === QuestionTypes.date && /*#__PURE__*/_jsxDEV(Input, {\n          type: \"date\",\n          ...register(fieldName)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 25\n        }, this), question.type === QuestionTypes.select && /*#__PURE__*/_jsxDEV(Select, {\n          items: Array.isArray(question.currentValue) ? question.currentValue : [],\n          ...register(fieldName)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }, this), question.type === QuestionTypes.radio && Array.isArray(question.currentValue) && question.currentValue.map(opt => /*#__PURE__*/_jsxDEV(Input, {\n          type: \"radio\",\n          label: opt,\n          value: opt,\n          ...register(fieldName)\n        }, opt, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 29\n        }, this)), question.type === QuestionTypes.multiple && (question === null || question === void 0 ? void 0 : (_question$multiple = question.multiple) === null || _question$multiple === void 0 ? void 0 : _question$multiple.map(q => {\n          var _errors$q$fieldName;\n          return /*#__PURE__*/_jsxDEV(Fragment, {\n            children: [q.type === QuestionTypes.email && /*#__PURE__*/_jsxDEV(Input, {\n              label: q.inputLabel,\n              type: \"email\",\n              ...register(q.fieldName)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 37\n            }, this), q.type === QuestionTypes.textInput && /*#__PURE__*/_jsxDEV(Input, {\n              label: q.inputLabel,\n              ...register(q.fieldName)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                color: \"red\"\n              },\n              children: (_errors$q$fieldName = errors[q.fieldName]) === null || _errors$q$fieldName === void 0 ? void 0 : _errors$q$fieldName.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 33\n            }, this)]\n          }, q.inputLabel, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 29\n          }, this);\n        })), /*#__PURE__*/_jsxDEV(ErrorMsg, {\n          children: (_errors$fieldName = errors[fieldName]) === null || _errors$fieldName === void 0 ? void 0 : _errors$fieldName.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(SButton, {\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n_s(Survey, \"I8pVAlk4IrWs+A1GfeqlWNQNXeg=\", false, function () {\n  return [useQuestion, useForm];\n});\n_c = Survey;\nexport default Survey;\nvar _c;\n$RefreshReg$(_c, \"Survey\");","map":{"version":3,"names":["React","Fragment","useState","useForm","yupResolver","QuestionTypes","Input","useQuestion","styled","Select","Survey","questionIndex","setQuestionIndex","question","fieldName","validationSchema","register","formState","errors","handleSubmit","resolver","onSubmit","data","console","log","prev","Wrapper","div","SButton","button","ErrorMsg","p","color","type","textInput","numberInput","date","select","Array","isArray","currentValue","radio","map","opt","multiple","q","email","inputLabel","message"],"sources":["C:/Users/Garik/Desktop/task2/client/src/components/Survey/Survey.tsx"],"sourcesContent":["import React, { Fragment, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { QuestionTypes } from \"../../store/types\";\nimport Input from \"../UI/Input/Input\";\nimport { useQuestion } from \"../../hooks\";\nimport styled from \"styled-components\";\nimport Select from \"../UI/Select/Select\";\n\nconst Survey = () => {\n    const [questionIndex, setQuestionIndex] = useState(0);\n    const { question, fieldName, validationSchema } =\n        useQuestion(questionIndex);\n\n    type FormTypes = {\n        [fieldName: string]: typeof question.currentValue | string;\n    };\n\n    const {\n        register,\n        formState: { errors },\n        handleSubmit,\n    } = useForm<FormTypes>({ resolver: yupResolver(validationSchema) });\n\n    const onSubmit = (data: FormTypes) => {\n        console.log(data);\n        setQuestionIndex((prev) => ++prev);\n    };\n\n    const Wrapper = styled.div`\n        width: 100%;\n        max-width: 1000px;\n        min-width: 500px;\n        height: 100vh;\n        margin: 0 auto;\n        padding: 10px;\n        background-color: lightgrey;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        flex-direction: column;\n    `;\n\n    const SButton = styled.button`\n        padding: 10px 15px;\n        color: #fff;\n        background-color: teal;\n        outline: 0;\n        border: 0;\n        border-radius: 5px;\n        transition: all 0.2s ease-in-out;\n        margin: 10px 0;\n        &:hover {\n            color: teal;\n            background-color: #fff;\n            cursor: pointer;\n        }\n    `;\n\n    const ErrorMsg = styled.p`\n        color: red;\n        height: 20px;\n        width: 100%;\n    `;\n\n    return (\n        <Wrapper>\n            <h2 style={{color: 'darkred'}}>{question.question}</h2>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <div>\n                    {question.type === QuestionTypes.textInput && (\n                        <Input type=\"text\" {...register(fieldName)} />\n                    )}\n                    {question.type === QuestionTypes.numberInput && (\n                        <Input type=\"number\" {...register(fieldName)} />\n                    )}\n                    {question.type === QuestionTypes.date && (\n                        <Input type=\"date\" {...register(fieldName)} />\n                    )}\n                    {question.type === QuestionTypes.select && (\n                        <Select items={Array.isArray(question.currentValue) ? question.currentValue : []} {...register(fieldName)} />\n                    )}\n                    {question.type === QuestionTypes.radio &&\n                        Array.isArray(question.currentValue) &&\n                        question.currentValue.map((opt) => (\n                            <Input\n                                type=\"radio\"\n                                label={opt}\n                                value={opt}\n                                key={opt}\n                                {...register(fieldName)}\n                            />\n                        ))}\n                    {question.type === QuestionTypes.multiple &&\n                        question?.multiple?.map((q) => (\n                            <Fragment key={q.inputLabel}>\n                                {q.type === QuestionTypes.email && (\n                                    <Input\n                                        label={q.inputLabel}\n                                        type=\"email\"\n                                        {...register(q.fieldName)}\n                                    />\n                                )}\n                                {q.type === QuestionTypes.textInput && (\n                                    <Input\n                                        label={q.inputLabel}\n                                        {...register(q.fieldName)}\n                                    />\n                                )}\n                                <p style={{ color: \"red\" }}>\n                                    {errors[q.fieldName]?.message}\n                                </p>\n                            </Fragment>\n                        ))}\n                    <ErrorMsg>{errors[fieldName]?.message}</ErrorMsg>\n                </div>\n                <div>\n                    <SButton>Submit</SButton>\n                </div>\n            </form>\n        </Wrapper>\n    );\n};\n\nexport default Survey;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,QAAQ,QAAQ,OAAO;AACjD,SAASC,OAAO,QAAQ,iBAAiB;AACzC,SAASC,WAAW,QAAQ,yBAAyB;AACrD,SAASC,aAAa,QAAQ,mBAAmB;AACjD,OAAOC,KAAK,MAAM,mBAAmB;AACrC,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,MAAM,MAAM,qBAAqB;AAAC;AAEzC,MAAMC,MAAM,GAAG,MAAM;EAAA;EAAA;EACjB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EACrD,MAAM;IAAEW,QAAQ;IAAEC,SAAS;IAAEC;EAAiB,CAAC,GAC3CR,WAAW,CAACI,aAAa,CAAC;EAM9B,MAAM;IACFK,QAAQ;IACRC,SAAS,EAAE;MAAEC;IAAO,CAAC;IACrBC;EACJ,CAAC,GAAGhB,OAAO,CAAY;IAAEiB,QAAQ,EAAEhB,WAAW,CAACW,gBAAgB;EAAE,CAAC,CAAC;EAEnE,MAAMM,QAAQ,GAAIC,IAAe,IAAK;IAClCC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IACjBV,gBAAgB,CAAEa,IAAI,IAAK,EAAEA,IAAI,CAAC;EACtC,CAAC;EAED,MAAMC,OAAO,GAAGlB,MAAM,CAACmB,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;EAED,MAAMC,OAAO,GAAGpB,MAAM,CAACqB,MAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;EAED,MAAMC,QAAQ,GAAGtB,MAAM,CAACuB,CAAE;AAC9B;AACA;AACA;AACA,KAAK;EAED,oBACI,QAAC,OAAO;IAAA,wBACJ;MAAI,KAAK,EAAE;QAACC,KAAK,EAAE;MAAS,CAAE;MAAA,UAAEnB,QAAQ,CAACA;IAAQ;MAAA;MAAA;MAAA;IAAA,QAAM,eACvD;MAAM,QAAQ,EAAEM,YAAY,CAACE,QAAQ,CAAE;MAAA,wBACnC;QAAA,WACKR,QAAQ,CAACoB,IAAI,KAAK5B,aAAa,CAAC6B,SAAS,iBACtC,QAAC,KAAK;UAAC,IAAI,EAAC,MAAM;UAAA,GAAKlB,QAAQ,CAACF,SAAS;QAAC;UAAA;UAAA;UAAA;QAAA,QAC7C,EACAD,QAAQ,CAACoB,IAAI,KAAK5B,aAAa,CAAC8B,WAAW,iBACxC,QAAC,KAAK;UAAC,IAAI,EAAC,QAAQ;UAAA,GAAKnB,QAAQ,CAACF,SAAS;QAAC;UAAA;UAAA;UAAA;QAAA,QAC/C,EACAD,QAAQ,CAACoB,IAAI,KAAK5B,aAAa,CAAC+B,IAAI,iBACjC,QAAC,KAAK;UAAC,IAAI,EAAC,MAAM;UAAA,GAAKpB,QAAQ,CAACF,SAAS;QAAC;UAAA;UAAA;UAAA;QAAA,QAC7C,EACAD,QAAQ,CAACoB,IAAI,KAAK5B,aAAa,CAACgC,MAAM,iBACnC,QAAC,MAAM;UAAC,KAAK,EAAEC,KAAK,CAACC,OAAO,CAAC1B,QAAQ,CAAC2B,YAAY,CAAC,GAAG3B,QAAQ,CAAC2B,YAAY,GAAG,EAAG;UAAA,GAAKxB,QAAQ,CAACF,SAAS;QAAC;UAAA;UAAA;UAAA;QAAA,QAC5G,EACAD,QAAQ,CAACoB,IAAI,KAAK5B,aAAa,CAACoC,KAAK,IAClCH,KAAK,CAACC,OAAO,CAAC1B,QAAQ,CAAC2B,YAAY,CAAC,IACpC3B,QAAQ,CAAC2B,YAAY,CAACE,GAAG,CAAEC,GAAG,iBAC1B,QAAC,KAAK;UACF,IAAI,EAAC,OAAO;UACZ,KAAK,EAAEA,GAAI;UACX,KAAK,EAAEA,GAAI;UAAA,GAEP3B,QAAQ,CAACF,SAAS;QAAC,GADlB6B,GAAG;UAAA;UAAA;UAAA;QAAA,QAGf,CAAC,EACL9B,QAAQ,CAACoB,IAAI,KAAK5B,aAAa,CAACuC,QAAQ,KACrC/B,QAAQ,aAARA,QAAQ,6CAARA,QAAQ,CAAE+B,QAAQ,uDAAlB,mBAAoBF,GAAG,CAAEG,CAAC;UAAA;UAAA,oBACtB,QAAC,QAAQ;YAAA,WACJA,CAAC,CAACZ,IAAI,KAAK5B,aAAa,CAACyC,KAAK,iBAC3B,QAAC,KAAK;cACF,KAAK,EAAED,CAAC,CAACE,UAAW;cACpB,IAAI,EAAC,OAAO;cAAA,GACR/B,QAAQ,CAAC6B,CAAC,CAAC/B,SAAS;YAAC;cAAA;cAAA;cAAA;YAAA,QAEhC,EACA+B,CAAC,CAACZ,IAAI,KAAK5B,aAAa,CAAC6B,SAAS,iBAC/B,QAAC,KAAK;cACF,KAAK,EAAEW,CAAC,CAACE,UAAW;cAAA,GAChB/B,QAAQ,CAAC6B,CAAC,CAAC/B,SAAS;YAAC;cAAA;cAAA;cAAA;YAAA,QAEhC,eACD;cAAG,KAAK,EAAE;gBAAEkB,KAAK,EAAE;cAAM,CAAE;cAAA,iCACtBd,MAAM,CAAC2B,CAAC,CAAC/B,SAAS,CAAC,wDAAnB,oBAAqBkC;YAAO;cAAA;cAAA;cAAA;YAAA,QAC7B;UAAA,GAhBOH,CAAC,CAACE,UAAU;YAAA;YAAA;YAAA;UAAA,QAiBhB;QAAA,CACd,CAAC,gBACN,QAAC,QAAQ;UAAA,+BAAE7B,MAAM,CAACJ,SAAS,CAAC,sDAAjB,kBAAmBkC;QAAO;UAAA;UAAA;UAAA;QAAA,QAAY;MAAA;QAAA;QAAA;QAAA;MAAA,QAC/C,eACN;QAAA,uBACI,QAAC,OAAO;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAiB;QAAA;QAAA;QAAA;MAAA,QACvB;IAAA;MAAA;MAAA;MAAA;IAAA,QACH;EAAA;IAAA;IAAA;IAAA;EAAA,QACD;AAElB,CAAC;AAAC,GAjHItC,MAAM;EAAA,QAGJH,WAAW,EAUXJ,OAAO;AAAA;AAAA,KAbTO,MAAM;AAmHZ,eAAeA,MAAM;AAAC;AAAA"},"metadata":{},"sourceType":"module"}